#include "comandos/guardaandar.bgt"
#include "comandos/bombaremota.bgt"
#include "comandos/maxbomba.bgt"
#include "comandos/bombarelogio.bgt"
#include "comandos/sequestrador.bgt"
#include "comandos/urso.bgt"
#include "comandos/dardoenvenenado.bgt"
#include "comandos/dardo.bgt"
#include "comandos/guardacofre.bgt"
#include "comandos/prensadeira.bgt"
#include "comandos/dragonsauro.bgt"
#include "comandos/megadragonsauro.bgt"
#include "comandos/macaco.bgt"
#include "comandos/cachorro.bgt"
#include "comandos/tubarao.bgt"
#include "comandos/lobo.bgt"
#include "comandos/fogoqueimar.bgt"
#include "comandos/bebesauro.bgt"
#include "comandos/rato.bgt"
#include "comandos/pato.bgt"
#include "comandos/zumbi.bgt"
#include "comandos/robo_coletor.bgt"
#include "comandos/carroforte.bgt"
#include "comandos/sequestrador2.bgt"
double g_dist(guardaandar@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bombaremota_distance(bombaremota@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bomba_distance(maxbomba@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bombarelogio_distance(bombarelogio@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_sequestrador_distance(sequestrador@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_urso_distance(urso@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dardoenvenenado_distance(dardoenvenenado@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dardo_distance(dardo@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_guardacofre_distance(guardacofre@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_prensadeira_distance(prensadeira@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dragonsauro_distance(dragonsauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_megadragonsauro_distance(megadragonsauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_macaco_distance(macaco@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_cachorro_distance(cachorro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_tubarao_distance(tubarao@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_lobo_distance(lobo@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_fogo_distance(fogoqueimar@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bebesauro_distance(bebesauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_rato_distance(rato@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
bool emequipe(string nome, string alvo){
	bool encontrado=false;
	int n=get_player_index_from(nome);
	int nb=get_player_index_from(alvo);
	if(n<0||nb<0)return true;
	else if(n>-1&&nb>-1){
		if(players[n].nomesequipe.find(alvo)>-1||players[nb].afk==true||players[nb].pacifico==1||get_safezone_at(players[nb].x, players[nb].y, players[nb].map)==true)return true;
		else return false;
	}
	return true;
}
double get_pato_distance(pato@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double g_zumbi(zumbi@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
string selecionar_jogador(string mapa){
	string[] nomes;
	for(uint i=0;i<players.length();i++){
		if(players[i].map==mapa)nomes.insert_last(players[i].charname);
	}
	if(nomes.length()==0)return "";
	return nomes[random(0, nomes.length()-1)];
}
int refletir(int index, string nome, int x, int y, int dano){
	if(!players[index].star2)return 0;
	send_packet_unreliable(0, players[index].x, "play lih.ogg "+players[index].x+" "+players[index].y, players[index].map);
	send_packet_unreliable(0, x,"rico "+nome+"apanhando1.ogg "+x+" "+y, players[index].map);
	return dano;
}
double g_robo_coletore(robo_coletor@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double gcforte(carroforte@ m1, player@ p2){
	if(m1.mapa!=p2.map||p2.afk||p2.pacifico==1) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double g_sequestrador2(sequestrador2@ m1, player@ p2){
	if(m1.mapa!=p2.map||p2.afk||p2.pacifico==1) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
