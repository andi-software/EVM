//homem da caverna
hcaverna@[] hcavernas;
class hcaverna{
	int x, y, vida=random(100000, 300000), morrendo=0, morreu=0, narma, ndist=7, ndano=random(2000, 4000), natirar=1232, nsom=5000;
	string mapa, golpeado, njogador;
	timer tandar, tmorreu, tsom, tatirar;
	string[] tipoarma={"", "lança", "espada_curta", "espada"};
	hcaverna(int zx, int zy, string m, int tn){
		x=zx;
		y=zy;
		mapa=m;
		tmorreu.force(0);
		tmorreu.pause();
		narma=tn;
		if(tn==3){
			ndist=10;
			natirar=random(800, 1400);
			ndano=random(5000, 8000);
		}
	}
	~hcaverna(){
		for(uint i=0;i<walls.length();i++){
			if(walls[i].map==mapa)walls[i].vida=-1;
		}
	}
}
void colocar_hcaverna(int x, int y, string m, int nn=random(1, 2)){
	hcaverna z(x, y, m, nn);
	hcavernas.insert_last(z);
	colocar_wall(97, m, 1000000000);
	spawn_obj(100,0,"antídoto-",1, m);
}
void hcavernaloop(){
	for(uint i=0;i<hcavernas.length();i++){
		int saiu=0;
		if(hcavernas[i].vida<=0&&hcavernas[i].morreu==1&&hcavernas[i].tmorreu.elapsed>=4450){
			send_packet(0, "play "+get_tile_at(hcavernas[i].x, hcavernas[i].y, hcavernas[i].mapa)+"harland.ogg "+hcavernas[i].x+" "+hcavernas[i].y,
			hcavernas[i].mapa);
			string golp=hcavernas[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;homem_das_cavernas;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(1050, 1500));
			}
			hcavernas.remove_at(i);
			saiu=1;
			return;
		}
		if(saiu==1)break;
		else if(hcavernas[i].morreu==0&&hcavernas[i].vida<=0){
			send_packet(0, "play v1morte1.ogg "+hcavernas[i].x+" "+hcavernas[i].y, hcavernas[i].mapa);
			hcavernas[i].tmorreu.restart();
			hcavernas[i].morreu=1;
		}
		if(hcavernas[i].tsom.elapsed>=hcavernas[i].nsom&&hcavernas[i].morrendo==0&&hcavernas[i].morreu==0){
			hcavernas[i].nsom=random(2000, 6200);
			send_packet(0, "play uga"+random(1, 2)+".ogg "+hcavernas[i].x+" "+hcavernas[i].y, hcavernas[i].mapa);
			hcavernas[i].tsom.restart();
		}
		if(saiu==1)break;
		int andar=1;
		if(hcavernas[i].tatirar.elapsed>=hcavernas[i].natirar&&hcavernas[i].morreu==0){
			hcavernas[i].tatirar.restart();
			int i2=get_player_index_from(hcavernas[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=hcavernas[i].mapa)i2=-1;
			}
			if(i2<0)hcavernas[i].njogador=selecionar_jogador(hcavernas[i].mapa);
			i2=get_player_index_from(hcavernas[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=hcavernas[i].mapa)i2=-1;
			}
			if(i2<0)break;
			if(g(hcavernas[i].x, hcavernas[i].y, players[i2].x, players[i2].y)<=hcavernas[i].ndist&&players[i2].afk==false&&players[i2].pacifico==0&&get_safezone_at(players[i2].x, players[i2].y,players[i2].map)==false){
				andar=0;
				send_packet(0, "play "+hcavernas[i].tipoarma[hcavernas[i].narma]+".ogg "+hcavernas[i].x+" "+hcavernas[i].y, hcavernas[i].mapa);
				players[i2].health-=hcavernas[i].ndano;
				send_packet(0, "play uga_bater"+random(1, 2)+".ogg "+hcavernas[i].x+" "+hcavernas[i].y, hcavernas[i].mapa);
				players[i2].lasthit="homem_das_cavernas";
				break;
			}
		}
		andar=0;
		if(hcavernas[i].tandar.elapsed>=210&&hcavernas[i].morrendo==0&&hcavernas[i].morreu==0&&andar==1&&hcavernas[i].narma<3){
			hcavernas[i].tandar.restart();
			int i2=get_player_index_from(hcavernas[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=hcavernas[i].mapa)i2=-1;
			}
			if(i2<0)hcavernas[i].njogador=selecionar_jogador(hcavernas[i].mapa);
			i2=get_player_index_from(hcavernas[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=hcavernas[i].mapa)i2=-1;
			}
			if(i2<0)break;
			if(hcavernas[i].x>players[i2].x-1&&!players[i2].afk&&string_contains(get_tile_at(hcavernas[i].x-1, hcavernas[i].y, hcavernas[i].mapa), "wall", 1)<0&&andar==1){
				hcavernas[i].x--;
				send_packet(0, "play "+get_tile_at(hcavernas[i].x, hcavernas[i].y, hcavernas[i].mapa)+"step"+random(1, 5)+".ogg "+hcavernas[i].x+" "+hcavernas[i].y,
				hcavernas[i].mapa);
				andar=0;
				break;
			}
			else if(hcavernas[i].x<players[i2].x+1&&!players[i2].afk&&string_contains(get_tile_at(hcavernas[i].x+1, hcavernas[i].y, hcavernas[i].mapa), "wall", 1)<0&&andar==1){
				hcavernas[i].x++;
				send_packet(0, "play "+get_tile_at(hcavernas[i].x, hcavernas[i].y, hcavernas[i].mapa)+"step"+random(1, 5)+".ogg "+hcavernas[i].x+" "+hcavernas[i].y,
				hcavernas[i].mapa);
				andar=0;
				break;
			}
		}
		for(uint i2=0;i2<players.length();i2++){
			if(players[i2].map==hcavernas[i].mapa&&players[i2].afk==false&&players[i2].pacifico==0&&g(hcavernas[i].x, hcavernas[i].y, players[i2].x, players[i2].y)<=hcavernas[i].ndist){
				hcavernas[i].njogador=players[i2].charname;
				break;
			}
		}
	}
}
//sequestrador2
sequestrador2@[] sequestrador2s;
class sequestrador2{
	int x, y, vida=100000, morrendo=0, morreu=0, narma, ndist=50, ndano=random(10000, 20000), natirar=5560;
	string mapa, golpeado, njogador;
	timer tandar, tmorreu, tsom, tatirar;
	string[] tipoarma={"", "bazuca", "mp7", "ak48"};
	sequestrador2(int zx, int zy, string m, int tn){
		x=zx;
		y=zy;
		mapa=m;
		tmorreu.force(0);
		tmorreu.pause();
		narma=tn;
		if(tn==3){
			ndist=350;
			natirar=500;
			ndano=random(3000, 8000);
		}
	}
}
void colocar_sequestrador2(int x, int y, string m, int nn=random(1, 2)){
	sequestrador2 z(x, y, m, nn);
	sequestrador2s.insert_last(z);
}
void sequestrador2loop(){
	for(uint i=0;i<sequestrador2s.length();i++){
		int saiu=0;
		if(sequestrador2s[i].vida<=0&&sequestrador2s[i].morreu==1&&sequestrador2s[i].tmorreu.elapsed>=4450){
			send_packet(0, "play "+get_tile_at(sequestrador2s[i].x, sequestrador2s[i].y, sequestrador2s[i].mapa)+"harland.ogg "+sequestrador2s[i].x+" "+sequestrador2s[i].y, sequestrador2s[i].mapa);
			string golp=sequestrador2s[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;sequestrador;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_sequestrador", 20, false);
				players[xx].inv_add_item(sequestrador2s[i].tipoarma[sequestrador2s[i].narma], 1);
			}
			sequestrador2s.remove_at(i);
			saiu=1;
			return;
		}
		if(saiu==1)break;
		else if(sequestrador2s[i].morreu==0&&sequestrador2s[i].vida<=0){
			send_packet(0, "play v1morte1.ogg "+sequestrador2s[i].x+" "+sequestrador2s[i].y, sequestrador2s[i].mapa);
			sequestrador2s[i].tmorreu.restart();
			sequestrador2s[i].morreu=1;
		}
		if(saiu==1)break;
		int andar=1;
		if(sequestrador2s[i].tatirar.elapsed>=sequestrador2s[i].natirar&&sequestrador2s[i].morreu==0){
			sequestrador2s[i].tatirar.restart();
			int i2=get_player_index_from(sequestrador2s[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=sequestrador2s[i].mapa)i2=-1;
			}
			if(i2<0)sequestrador2s[i].njogador=selecionar_jogador(sequestrador2s[i].mapa);
			i2=get_player_index_from(sequestrador2s[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=sequestrador2s[i].mapa)i2=-1;
			}
			if(i2<0)break;
			if(g_sequestrador2(sequestrador2s[i], players[i2])>-1&&g_sequestrador2(sequestrador2s[i], players[i2])<=sequestrador2s[i].ndist&&players[i2].afk==false&&players[i2].pacifico==0&&get_safezone_at(players[i2].x, players[i2].y,players[i2].map)==false){
				andar=0;
				send_packet(0, "play "+sequestrador2s[i].tipoarma[sequestrador2s[i].narma]+".ogg "+sequestrador2s[i].x+" "+sequestrador2s[i].y, sequestrador2s[i].mapa);
				players[i2].health-=sequestrador2s[i].ndano;
				players[i2].lasthit="sequestrador";
				send_packet(0, "play body"+random(1, 7)+".ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
				break;
			}
		}
		if(sequestrador2s[i].tandar.elapsed>=210&&sequestrador2s[i].morrendo==0&&sequestrador2s[i].morreu==0&&andar==1&&sequestrador2s[i].narma<3){
			sequestrador2s[i].tandar.restart();
			int i2=get_player_index_from(sequestrador2s[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=sequestrador2s[i].mapa)i2=-1;
			}
			if(i2<0)sequestrador2s[i].njogador=selecionar_jogador(sequestrador2s[i].mapa);
			i2=get_player_index_from(sequestrador2s[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=sequestrador2s[i].mapa)i2=-1;
			}
			if(i2<0)break;
			if(sequestrador2s[i].x>players[i2].x-1&&!players[i2].afk&&string_contains(get_tile_at(sequestrador2s[i].x-1, sequestrador2s[i].y, sequestrador2s[i].mapa), "wall", 1)<0&&andar==1){
				sequestrador2s[i].x--;
				send_packet(0, "play "+get_tile_at(sequestrador2s[i].x, sequestrador2s[i].y, sequestrador2s[i].mapa)+"step"+random(1, 5)+".ogg "+sequestrador2s[i].x+" "+sequestrador2s[i].y, sequestrador2s[i].mapa);
				andar=0;
				break;
			}
			else if(sequestrador2s[i].x<players[i2].x+1&&!players[i2].afk&&string_contains(get_tile_at(sequestrador2s[i].x+1, sequestrador2s[i].y, sequestrador2s[i].mapa), "wall", 1)<0&&andar==1){
				sequestrador2s[i].x++;
				send_packet(0, "play "+get_tile_at(sequestrador2s[i].x, sequestrador2s[i].y, sequestrador2s[i].mapa)+"step"+random(1, 5)+".ogg "+sequestrador2s[i].x+" "+sequestrador2s[i].y, sequestrador2s[i].mapa);
				andar=0;
				break;
			}
		}
		for(uint i2=0;i2<players.length();i2++){
			if(players[i2].map==sequestrador2s[i].mapa&&players[i2].afk==false&&players[i2].pacifico==0&&g_sequestrador2(sequestrador2s[i], players[i2])>-1&&g_sequestrador2(sequestrador2s[i], players[i2])<=sequestrador2s[i].ndist){
				sequestrador2s[i].njogador=players[i2].charname;
				break;
			}
		}
	}
}
//Coelho
coelho@[] coelhos;
class coelho{
	int x, y, vida=random(500, 1000), morrendo=0, morreu=0, nsom=random(350, 1200);
	string mapa, golpeado, njogador;
	timer tandar, tmorreu, tsom;
	coelho(int zx, int zy, string m){
		x=zx;
		y=zy;
		mapa=m;
		tmorreu.force(0);
		tmorreu.pause();
	}
}
void colocar_coelho(int x, int y, string m){
	coelho z(x, y, m);
	coelhos.insert_last(z);
}
void coelholoop(){
	for(uint i=0;i<coelhos.length();i++){
		if(coelhos[i].vida<=0){
			send_packet(0, "play m_coelho.ogg "+coelhos[i].x+" "+coelhos[i].y, coelhos[i].mapa);
			string golp=coelhos[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;coelho;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("pele_de_coelho", 1);
				ganhaxp(players[xx].charname, random(10, 20), random(100, 500));
			}
			coelhos.remove_at(i);
			break;
		}
		if(coelhos[i].tsom.elapsed>=coelhos[i].nsom&&coelhos[i].morrendo==0&&coelhos[i].morreu==0){
			coelhos[i].nsom=random(800, 2300);
			send_packet(0, "play coelho"+random(1, 2)+".ogg "+coelhos[i].x+" "+coelhos[i].y, coelhos[i].mapa);
			coelhos[i].tsom.restart();
		}
		if(coelhos[i].tandar.elapsed>=130&&coelhos[i].morrendo==0&&coelhos[i].morreu==0){
			coelhos[i].tandar.restart();
			int i2=get_player_index_from(coelhos[i].njogador);
			if(i2>-1){
				if(players[i2].afk||players[i2].map!=coelhos[i].mapa)i2=-1;
			}
			if(i2<0)coelhos[i].njogador=selecionar_jogador(coelhos[i].mapa);
			i2=get_player_index_from(coelhos[i].njogador);
			if(i2>-1){
				if(players[i2].afk||players[i2].map!=coelhos[i].mapa)i2=-1;
			}
			if(i2<0)break;
			int andar=1;
			if(coelhos[i].x>players[i2].x-1&&!players[i2].afk&&string_contains(get_tile_at(coelhos[i].x-1, coelhos[i].y, coelhos[i].mapa), "wall", 1)<0&&andar==1){
				coelhos[i].x--;
				andar=0;
				break;
			}
			else if(coelhos[i].x<players[i2].x+1&&!players[i2].afk&&string_contains(get_tile_at(coelhos[i].x+1, coelhos[i].y, coelhos[i].mapa), "wall", 1)<0&&andar==1){
				coelhos[i].x++;
				andar=0;
				break;
			}
		}
	}
}
carroforte@[] carrosfortes;
class carroforte{
	int x, y=0, vida, natirar1=random(100, 140), natirar2=random(150, 190);
	string mapa, s, golpeado;
	timer tandar, tatirar1, tatirar2;
	carroforte(int cx, int cy, string cm, int cv){
		x=cx;
		y=cy;
		mapa=cm;
		s=spawn_moving_sound("car2.ogg", x, y, mapa);
		vida=cv;
	}
	~carroforte(){
		destroy_moving_sound(s);
	}
}
void carroforteloop(){
	for(uint i=0;i<carrosfortes.length();i++){
		if(carrosfortes[i].vida<=0){
			string golp=carrosfortes[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;destruiu um carro_forte;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(5000, 8000), random(250000, 500000));
				dar_reais(players[xx].charname, random(1000, 2000));
			}
			carrosfortes.remove_at(i);
			break;
		}
		if(carrosfortes[i].x>=240){
			carrosfortes.remove_at(i);
			break;
		}
		if(carrosfortes[i].tandar.elapsed>=230){
			carrosfortes[i].tandar.restart();
			carrosfortes[i].x++;
			update_moving_sound(carrosfortes[i].s, carrosfortes[i].x, carrosfortes[i].y);
		}
		if(carrosfortes[i].tatirar1.elapsed>=carrosfortes[i].natirar1){
			carrosfortes[i].natirar1=random(100, 160);
			carrosfortes[i].tatirar1.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].pacifico==0&&!players[i2].afk&&gcforte(carrosfortes[i], players[i2])>-1&&gcforte(carrosfortes[i], players[i2])<=20){
					send_packet(0, "play mk1.ogg "+carrosfortes[i].x+" "+carrosfortes[i].y, carrosfortes[i].mapa);
					players[i2].lasthit="carro_forte";
					players[i2].health-=310;
					break;
				}
			}
		}
		if(carrosfortes[i].tatirar2.elapsed>=carrosfortes[i].natirar2){
			carrosfortes[i].natirar1=random(130, 170);
			carrosfortes[i].tatirar2.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].pacifico==0&&!players[i2].afk&&gcforte(carrosfortes[i], players[i2])>-1&&gcforte(carrosfortes[i], players[i2])<=20){
					send_packet(0, "play ak48.ogg "+carrosfortes[i].x+" "+carrosfortes[i].y, carrosfortes[i].mapa);
					players[i2].lasthit="carro_forte";
					players[i2].health-=400;
					break;
				}
			}
		}
	}
}
void colocar_cforte(int x, int y, string mapa, int vida=50000){
	carroforte c(x, y, mapa, vida);
	carrosfortes.insert_last(c);
}
cobra@[] cobras;
class cobra{
	int x, y, landar=1;
	string mapa, s;
	timer t;
	cobra(int cx, int cy, string cm){
		x=cx;
		y=cy;
		mapa=cm;
		s=spawn_moving_sound("cobraloop.ogg", x, y, mapa);
	}
	~cobra(){
		destroy_moving_sound(s);
	}
}
void ccobra(int x, int y, string mapa){
	cobra c(x, y, mapa);
	cobras.insert_last(c);
}
void cobraloop(){
	for(uint i=0;i<cobras.length();i++){
		if(cobras[i].t.elapsed>=150){
			for(uint i2=0;i2<players.length();i2++){
				if(cobras[i].x==players[i2].x&&cobras[i].y==players[i2].y&&cobras[i].mapa==players[i2].map&&cobras[i].t.elapsed>=150){
					send_packet(0, "play cobramorde.ogg "+cobras[i].x+" "+cobras[i].y, cobras[i].mapa);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].health-=random(1000, 2000);
					players[i2].lasthit="cobra";
					cobras[i].t.restart();
					break;
				}
			}
			if(cobras[i].landar==1){
				cobras[i].t.restart();
				cobras[i].x--;
				update_moving_sound(cobras[i].s, cobras[i].x, cobras[i].y);
			}
			else if(cobras[i].landar==2){
				cobras[i].t.restart();
				cobras[i].y++;
				update_moving_sound(cobras[i].s, cobras[i].x, cobras[i].y);
			}
		}
		if(cobras[i].landar==1&&string_contains(get_tile_at(cobras[i].x-1, cobras[i].y, cobras[i].mapa), "walldirt", 1)>-1)cobras[i].landar=2;
		else if(cobras[i].landar==2&&string_contains(get_tile_at(cobras[i].x+1, cobras[i].y, cobras[i].mapa), "walldirt", 1)>-1)cobras[i].landar=1;
	}
}
missilguiado@[] misseisguiados;
class missilguiado{
	int x, y;
	string mapa, nome, alvo, s;
	timer tandar;
	missilguiado(int mx, int my, string mm, string mn, string ma){
		x=mx;
		y=my;
		mapa=mm;
		nome=mn;
		alvo=ma;
		s=spawn_moving_sound("rpgloop.ogg", x, y, mapa);
	}
	~missilguiado(){
		destroy_moving_sound(s);
	}
}
void cmissil(int x, int y, string mapa, string nome, string alvo){
	missilguiado m(x, y, mapa, nome, alvo);
	misseisguiados.insert_last(m);
}
void mguiadoloop(){
	for(uint i=0;i<misseisguiados.length();i++){
		int i2=get_player_index_from(misseisguiados[i].alvo);
		if(i2<0){
			int index=get_player_index_from(misseisguiados[i].nome);
			if(index>-1)players[index].inv_add_item("míssil_teleguiado", 1);
			misseisguiados.remove_at(i);
			break;
		}
		else if(players[i2].afk||players[i2].pacifico==1){
			int index=get_player_index_from(misseisguiados[i].nome);
			if(index>-1)players[index].inv_add_item("míssil_teleguiado", 1);
			misseisguiados.remove_at(i);
			break;
		}
		if(players[i2].map!=misseisguiados[i].mapa){
			misseisguiados[i].mapa=players[i2].map;
			misseisguiados[i].y=13;
			destroy_moving_sound(misseisguiados[i].s);
			misseisguiados[i].s=spawn_moving_sound("rpgloop.ogg", misseisguiados[i].x, misseisguiados[i].y, misseisguiados[i].mapa);
			break;
		}
		if(players[i2].x==misseisguiados[i].x&&misseisguiados[i].y==players[i2].y){
			players[i2].health-=random(5000, 8000);
			players[i2].lasthit="missil_"+misseisguiados[i].nome;
			send_packet(0, "play boobytraphit3.ogg "+misseisguiados[i].x+" "+misseisguiados[i].y, misseisguiados[i].mapa);
			send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
			misseisguiados.remove_at(i);
			break;
		}
		else if(misseisguiados[i].tandar.elapsed>=80){
			misseisguiados[i].tandar.restart();
			if(misseisguiados[i].y>players[i2].y){
				misseisguiados[i].y--;
				update_moving_sound(misseisguiados[i].s, misseisguiados[i].x, misseisguiados[i].y);
			}
			else if(misseisguiados[i].y<players[i2].y){
				misseisguiados[i].y++;
				update_moving_sound(misseisguiados[i].s, misseisguiados[i].x, misseisguiados[i].y);
			}
			else if(misseisguiados[i].x>players[i2].x){
				misseisguiados[i].x--;
				update_moving_sound(misseisguiados[i].s, misseisguiados[i].x, misseisguiados[i].y);
			}
			else if(misseisguiados[i].x<players[i2].x){
				misseisguiados[i].x++;
				update_moving_sound(misseisguiados[i].s, misseisguiados[i].x, misseisguiados[i].y);
			}
		}
	}
}
//robô_coletor
robo_coletor@[] robo_coletores;
class robo_coletor{
	int x, y, vida=random(3000, 6000), morrendo=0, morreu=0, nsom=random(350, 1200);
	string mapa, golpeado, njogador, s;
	timer tandar, tmorreu, tsom;
	robo_coletor(int zx, int zy, string m){
		x=zx;
		y=zy;
		mapa=m;
		tmorreu.force(0);
		tmorreu.pause();
		s=spawn_moving_sound("rloop"+random(1, 2)+".ogg", x, y, mapa);
	}
}
void colocar_robo_coletor(int x, int y, string m){
	robo_coletor z(x, y, m);
	robo_coletores.insert_last(z);
}
void robo_coletorloop(){
	for(uint i=0;i<robo_coletores.length();i++){
		if(robo_coletores[i].morreu==0&&robo_coletores[i].vida<=0){
			send_packet(0, "play m_robo_coletor.ogg "+robo_coletores[i].x+" "+robo_coletores[i].y, robo_coletores[i].mapa);
			robo_coletores[i].tmorreu.restart();
			robo_coletores[i].morreu=1;
		}
		if(robo_coletores[i].vida<=0&&robo_coletores[i].morreu==1&&robo_coletores[i].tmorreu.elapsed>=990){
			send_packet(0, "play "+get_tile_at(robo_coletores[i].x, robo_coletores[i].y, robo_coletores[i].mapa)+"harland.ogg "+robo_coletores[i].x+" "+robo_coletores[i].y, robo_coletores[i].mapa);
			string golp=robo_coletores[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;robô_coletor;!", 3);
			destroy_moving_sound(robo_coletores[i].s);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(50, 100), random(1000, 3000));
			}
			robo_coletores.remove_at(i);
			break;
		}
		if(robo_coletores[i].tsom.elapsed>=robo_coletores[i].nsom&&robo_coletores[i].morrendo==0&&robo_coletores[i].morreu==0){
			robo_coletores[i].nsom=random(2000, 6200);
			send_packet(0, "play robo"+random(1, 3)+".ogg "+robo_coletores[i].x+" "+robo_coletores[i].y, robo_coletores[i].mapa);
			robo_coletores[i].tsom.restart();
		}
		if(robo_coletores[i].tandar.elapsed>=210&&robo_coletores[i].morrendo==0&&robo_coletores[i].morreu==0){
			robo_coletores[i].tandar.restart();
			int i2=get_player_index_from(robo_coletores[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=robo_coletores[i].mapa)i2=-1;
			}
			if(i2<0)robo_coletores[i].njogador=selecionar_jogador(robo_coletores[i].mapa);
			i2=get_player_index_from(robo_coletores[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=robo_coletores[i].mapa)i2=-1;
			}
			if(i2<0)break;
			int andar=1;
			if(g_robo_coletore(robo_coletores[i], players[i2])>-1&&g_robo_coletore(robo_coletores[i], players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==false){
				andar=0;
				players[i2].health-=random(3000, 4000);
				players[i2].lasthit="robô_coletor";
				send_packet(0, "play robobater"+random(1, 2)+".ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
			}
			if(robo_coletores[i].x>players[i2].x-1&&!players[i2].afk&&string_contains(get_tile_at(robo_coletores[i].x-1, robo_coletores[i].y, robo_coletores[i].mapa), "wall", 1)<0&&andar==1){
				robo_coletores[i].x--;
				update_moving_sound(robo_coletores[i].s,robo_coletores[i].x,robo_coletores[i].y);
				send_packet(0, "play "+get_tile_at(robo_coletores[i].x, robo_coletores[i].y, robo_coletores[i].mapa)+"step"+random(1, 5)+".ogg "+robo_coletores[i].x+" "+robo_coletores[i].y, robo_coletores[i].mapa);
				andar=0;
				break;
			}
			else if(robo_coletores[i].x<players[i2].x+1&&!players[i2].afk&&string_contains(get_tile_at(robo_coletores[i].x+1, robo_coletores[i].y, robo_coletores[i].mapa), "wall", 1)<0&&andar==1){
				robo_coletores[i].x++;
				update_moving_sound(robo_coletores[i].s,robo_coletores[i].x,robo_coletores[i].y);
				send_packet(0, "play "+get_tile_at(robo_coletores[i].x, robo_coletores[i].y, robo_coletores[i].mapa)+"step"+random(1, 5)+".ogg "+robo_coletores[i].x+" "+robo_coletores[i].y, robo_coletores[i].mapa);
				andar=0;
				break;
			}
		}
	}
}
//zumbi
zumbi@[] zumbis;
class zumbi{
	int x, y, vida=random(3000, 6000), morrendo=0, morreu=0, nsom=random(350, 1200);
	string mapa, golpeado, njogador;
	timer tandar, tmorreu, tsom;
	zumbi(int zx, int zy, string m){
		x=zx;
		y=zy;
		mapa=m;
		tmorreu.force(0);
		tmorreu.pause();
	}
}
void colocar_zumbi(int x, int y, string m){
	zumbi z(x, y, m);
	zumbis.insert_last(z);
}
void zumbiloop(){
	for(uint i=0;i<zumbis.length();i++){
		if(zumbis[i].morreu==0&&zumbis[i].vida<=0){
			send_packet(0, "play m_zumbi.ogg "+zumbis[i].x+" "+zumbis[i].y, zumbis[i].mapa);
			zumbis[i].tmorreu.restart();
			zumbis[i].morreu=1;
		}
		if(zumbis[i].vida<=0&&zumbis[i].morreu==1&&zumbis[i].tmorreu.elapsed>=990){
			send_packet(0, "play "+get_tile_at(zumbis[i].x, zumbis[i].y, zumbis[i].mapa)+"harland.ogg "+zumbis[i].x+" "+zumbis[i].y, zumbis[i].mapa);
			string golp=zumbis[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;zumbi;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(50, 100), random(1000, 3000));
			}
			int n=random(1, 100);
			if(n<=15){
				for(uint i=0;i<=random(1, 2);i++){
					colocar_zumbi(random(32, 300), 0, "zona_de_segurança");
				}
			}
			zumbis.remove_at(i);
			break;
		}
		if(zumbis[i].tsom.elapsed>=zumbis[i].nsom&&zumbis[i].morrendo==0&&zumbis[i].morreu==0){
			zumbis[i].nsom=random(2000, 6200);
			send_packet(0, "play zumbi"+random(1, 2)+".ogg "+zumbis[i].x+" "+zumbis[i].y, zumbis[i].mapa);
			zumbis[i].tsom.restart();
		}
		if(zumbis[i].tandar.elapsed>=210&&zumbis[i].morrendo==0&&zumbis[i].morreu==0){
			zumbis[i].tandar.restart();
			int i2=get_player_index_from(zumbis[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=zumbis[i].mapa)i2=-1;
			}
			if(i2<0)zumbis[i].njogador=selecionar_jogador(zumbis[i].mapa);
			i2=get_player_index_from(zumbis[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=zumbis[i].mapa)i2=-1;
			}
			if(i2<0)break;
			int andar=1;
			if(g_zumbi(zumbis[i], players[i2])>-1&&g_zumbi(zumbis[i], players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==false){
				andar=0;
				int r=refletir(i2, "zumbi", zumbis[i].x, zumbis[i].y, random(300, 400));
				if(r>0){zumbis[i].vida-=r;zumbis[i].golpeado=players[i2].charname;break;}
				players[i2].health-=random(300, 400);
				players[i2].lasthit="zumbi";
				send_packet(0, "play z_bater"+random(1, 2)+".ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
			}
			if(zumbis[i].x>players[i2].x-1&&!players[i2].afk&&string_contains(get_tile_at(zumbis[i].x-1, zumbis[i].y, zumbis[i].mapa), "wall", 1)<0&&andar==1&&players[i2].x>31){
				zumbis[i].x--;
				send_packet(0, "play "+get_tile_at(zumbis[i].x, zumbis[i].y, zumbis[i].mapa)+"step"+random(1, 5)+".ogg "+zumbis[i].x+" "+zumbis[i].y, zumbis[i].mapa);
				andar=0;
				break;
			}
			else if(zumbis[i].x<players[i2].x+1&&!players[i2].afk&&string_contains(get_tile_at(zumbis[i].x+1, zumbis[i].y, zumbis[i].mapa), "wall", 1)<0&&andar==1&&players[i2].x>31){
				zumbis[i].x++;
				send_packet(0, "play "+get_tile_at(zumbis[i].x, zumbis[i].y, zumbis[i].mapa)+"step"+random(1, 5)+".ogg "+zumbis[i].x+" "+zumbis[i].y, zumbis[i].mapa);
				andar=0;
				break;
			}
		}
	}
}
boladefogo@[]boladefogos;
class boladefogo{
	string nome, mapa, s;
	int lado, x, y;
	timer tandar, tremover;
	boladefogo(string n, int l, string mmapa, int bx, int by){
		nome=n;
		lado=l;
		mapa=mmapa;
		x=bx;
		y=by;
		s=spawn_moving_sound("boladefogo.ogg", x, y, mapa);
	}
}
void colocar_boladefogo(string nome, int lado, string mapa, int x, int y){
	boladefogo b(nome, lado, mapa, x, y);
	boladefogos.insert_last(b);
}
void boladefogoloop(){
	for(uint i=0;i<boladefogos.length();i++){
		if(boladefogos[i].tremover.elapsed>=50000){
			destroy_moving_sound(boladefogos[i].s);
			boladefogos.remove_at(i);
			break;
		}
		if(string_contains(get_tile_at(boladefogos[i].x, boladefogos[i].y, boladefogos[i].mapa), "wall", 1)>-1){
			send_packet(0, "play boobytraphit1.ogg "+boladefogos[i].x+" "+boladefogos[i].y, boladefogos[i].mapa);
			destroy_moving_sound(boladefogos[i].s);
			boladefogos.remove_at(i);
			break;
		}
		if(boladefogos[i].tandar.elapsed>=50){
			boladefogos[i].tandar.restart();
			if(boladefogos[i].lado==Right)boladefogos[i].x++;
			else if(boladefogos[i].lado==Left)boladefogos[i].x--;
			else if(boladefogos[i].lado==Back)boladefogos[i].y--;
			else if(boladefogos[i].lado==Forward)boladefogos[i].y++;
			update_moving_sound(boladefogos[i].s, boladefogos[i].x, boladefogos[i].y);
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].x==boladefogos[i].x&&boladefogos[i].y==players[i2].y&&players[i2].map==boladefogos[i].mapa&&players[i2].pacifico==0&&players[i2].afk==false&&!emequipe(boladefogos[i].nome, players[i2].charname)){
					send_packet(0,"play molotovatinge.ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].health-=2000;
					players[i2].lasthit="boladefogo_"+boladefogos[i].nome;
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					if(players[i2].health>0)colocar_fogogrudado(boladefogos[i].nome, players[i2].charname);
					destroy_moving_sound(boladefogos[i].s);
					boladefogos.remove_at(i);
					break;
				}
			}
		}
	}
}
//Fogo grudado
fogogrudado@[]fogosgrudados;
class fogogrudado{
	string nome, alvo;
	timer t, tt;
	fogogrudado(string cnome, string calvo){
		nome=cnome;
		alvo=calvo;
	}
}
void colocar_fogogrudado(string nome, string alvo){
	fogogrudado f(nome, alvo);
	fogosgrudados.insert_last(f);
}
void fogogrudadoloop(){
	for(uint i=0;i<fogosgrudados.length();i++){
		if(fogosgrudados[i].tt.elapsed>=30000){
			fogosgrudados.remove_at(i);
			break;
		}
		if(fogosgrudados[i].t.elapsed>=1000){
			fogosgrudados[i].t.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].charname==fogosgrudados[i].alvo){
					string s=get_tile_at(players[i2].x, players[i2].y, players[i2].map);
					if(string_contains(s, "water", 1)<0&&string_contains(s, "shallow", 1)<0){
						players[i2].health-=random(200, 400);
						players[i2].lasthit="boladefogo_"+fogosgrudados[i].nome;
						players[i2].nsede+=0.5;
						send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					}
					else{
						send_packet10(0, players[i2].charname, players[i2].charname, "waterhardland.ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
						fogosgrudados.remove_at(i);
						break;
					}
				}
			}
		}
	}
}
//pato
pato@[] patos;
class pato{
	int x, y, nandar=random(1000, 3000);
	string mapa, som;
	timer tandar, tvoar;
	pato(int px, int py, string pm){
		x=px;
		y=py;
		mapa=pm;
		som=spawn_moving_sound("pato_loop.ogg", x, y, mapa);
	}
}
void colocar_pato(int x, int y, string mapa){
	pato p(x, y, mapa);
	patos.insert_last(p);
}
void patoloop(){
	for(uint i=0;i<patos.length();i++){
		if(patos[i].tvoar.elapsed>=1200){
			for(uint i2=0;i2<players.length();i2++){
				if(patos[i].x<players[i2].x&&get_pato_distance(patos[i], players[i2])<10&&players[i2].afk==false&&players[i2].map==patos[i].mapa&&players[i2].starsoundid!=""){
					send_packet3(0, "play pato_voando"+random(1, 2)+".ogg "+patos[i].x+" "+patos[i].y, patos[i].mapa);
					patos[i].x-=random(30, 40);
				}
				else if(patos[i].x>players[i2].x&&get_pato_distance(patos[i], players[i2])<10&&players[i2].afk==false&&players[i2].map==patos[i].mapa&&players[i2].starsoundid!=""){
					send_packet3(0, "play pato_voando"+random(1, 2)+".ogg "+patos[i].x+" "+patos[i].y, patos[i].mapa);
					patos[i].x+=random(30, 40);
				}
			}
			patos[i].tvoar.restart();
		}
		if(patos[i].tandar.elapsed>=patos[i].nandar){
			patos[i].nandar=random(1000, 1500);
			patos[i].tandar.restart();
			if(patos[i].x<200)patos[i].x+=random(5, 9);
			if(patos[i].x>400)patos[i].x-=random(5, 9);
			update_moving_sound(patos[i].som, patos[i].x, patos[i].y);
		}
		if(patos[i].x<180){
			patos[i].x=180+random(4, 15);
			update_moving_sound(patos[i].som, patos[i].x, patos[i].y);
		}
		if(patos[i].x>400){
			patos[i].x=400-random(3, 15);
			update_moving_sound(patos[i].som, patos[i].x, patos[i].y);
		}
	}
}
//Bomba nuclear
bombanuclear@[] bombanucleares;
class bombanuclear{
	int x, y;
	string map, nome;
	timer bombaatomicatimer, tbipar1, tbipar2;
	int bombaatomicatime=60000;
	bombanuclear(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
	}
}
void bombanuclearloop(){
	for(uint i=0; i<bombanucleares.length(); i++){
		if(bombanucleares[i].tbipar1.elapsed>=10000&&bombanucleares[i].bombaatomicatimer.elapsed<50000){
			bombanucleares[i].tbipar1.restart();
			bombanucleares[i].tbipar2.restart();
			send_packet(0,"play timebombbeep.ogg "+bombanucleares[i].x+" "+bombanucleares[i].y, bombanucleares[i].map);
		}
		if(bombanucleares[i].tbipar2.elapsed>=1000&&bombanucleares[i].bombaatomicatimer.elapsed>=50000){
			send_packet(0,"play timebombbeep.ogg "+bombanucleares[i].x+" "+bombanucleares[i].y, bombanucleares[i].map);
			bombanucleares[i].tbipar2.restart();
		}
		if(bombanucleares[i].bombaatomicatimer.elapsed>=bombanucleares[i].bombaatomicatime){
			send_reliable(0,"ps bombaatomicaexplode.ogg", 0);
			for(uint i2=0; i2 < players.length(); i2++){
				if(players[i2].afk==false&&players[i2].is_admin()==false){
					players[i2].health=-1;
					players[i2].lasthit="bombanuclear_"+bombanucleares[i].nome;
				}
			}
			for(uint i2=0;i2<tubaraos.length();i2++){
				send_reliable(0, "msg2 tubarão; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(10, 20));
				tubaraos.remove_at(i2);
			}
			while(zumbis.length()>0){
				for(uint i2=0;i2<zumbis.length();i2++){
					send_reliable(0, "msg2 zumbi; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
					int xx=get_player_index_from(bombanucleares[i].nome);
					if(xx>-1)ganhaxp(players[xx].charname, random(50, 100));
					zumbis.remove_at(i2);
				}
			}
			for(uint i2=0;i2<cachorros.length();i2++){
				send_reliable(0, "msg2 cachorro; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(10, 20));
				cachorros.remove_at(i2);
			}
			for(uint i2=0;i2<macacos.length();i2++){
				send_reliable(0, "msg2 macaco; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(5, 10));
				macacos.remove_at(i2);
			}
			for(uint i2=0;i2<ursos.length();i2++){
				send_reliable(0, "msg2 urso; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(100, 200));
				ursos.remove_at(i2);
			}
			for(uint i2=0;i2<lobos.length();i2++){
				send_reliable(0, "msg2 lobo; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(20, 30));
				lobos.remove_at(i2);
			}
			sequestradors.resize(0);
			for(uint i2=0;i2<bebesauros.length();i2++){
				send_reliable(0, "msg2 bebê_sauro; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(200, 400));
				bebesauros.resize(0);
			}
			for(uint i2=0;i2<dragonsauros.length();i2++){
				send_reliable(0, "msg2 dragonsauro; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(1500, 2000));
				dragonsauros.remove_at(i2);
			}
			for(uint i2=0;i2<megadragonsauros.length();i2++){
				send_reliable(0, "msg2 mega;dragonsauro; ;teve todo seu corpo transposto pela destruição diabólica de; "+bombanucleares[i].nome+".", 3);
				int xx=get_player_index_from(bombanucleares[i].nome);
				if(xx>-1)ganhaxp(players[xx].charname, random(5000, 8000), random(2000000, 3000000));
				megadragonsauros.remove_at(i2);
			}
			for(uint i3=0; i3<objs.length(); i3++){
				objs[i3].obtainable=false;
				objs[i3].delete=true;
			}
			bombanucleares.remove_at(i);
		}
	}
}
void spawn_bombanuclear(int x, int y, string map, string nome){
	bombanuclear c(x, y, map, nome);
	bombanucleares.insert_last(c);
	send_packet(0,"play atomicaativada.ogg "+x+" "+y,map);
}
megadragonsauro@[] megadragonsauros;
class megadragonsauro{
	int x;
	int y;
	uint tiros=1;
	int vida;
	string golpeado;
	string map;
	timer megadragonsaurotimer, tbotar;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int megadragonsaurotime=700;
	bool modofugir=false;
	megadragonsauro(int cx, int cy, string cmap, int cvida){
		x=cx;
		y=cy;
		map=cmap;
		vida=10000000;
	}
}
void megadragonsauroloop(){
	for(uint i=0; i<megadragonsauros.length(); i++){
		if(megadragonsauros[i].vida<=0){
			uint total=0;
			send_packet(0,"play m_dragonsauro.ogg "+megadragonsauros[i].x+" "+megadragonsauros[i].y+" "+megadragonsauros[i].map,megadragonsauros[i].map);
			string golp=megadragonsauros[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;mega;dragonsauro;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_megadragonsauro", 10);
				ganhaxp(players[xx].charname, random(100000, 100001), random(100000, 100000));
			}
			megadragonsauros.remove_at(i);
			break;
		}
		if(megadragonsauros[i].tsom.elapsed>=megadragonsauros[i].asom+random(1000, 2000)){
			megadragonsauros[i].tsom.restart();
			string ss="dragonsauro"+random(1, 3)+".ogg";
			send_packet(0,"play "+ss+" "+megadragonsauros[i].x+" "+megadragonsauros[i].y+" "+megadragonsauros[i].map,megadragonsauros[i].map);
		}
		if(megadragonsauros[i].tiros<=0){
			megadragonsauros[i].tiros=1;
			megadragonsauros[i].tempoatirar.restart();
		}
		if(megadragonsauros[i].megadragonsaurotimer.elapsed>=megadragonsauros[i].megadragonsaurotime){
			megadragonsauros[i].megadragonsaurotimer.restart();
			int moveu=0;
			for(uint i2=0; i2 < players.length(); i2++){
				if(get_megadragonsauro_distance(megadragonsauros[i], players[i2])>-1&&get_megadragonsauro_distance(megadragonsauros[i],players[i2])<=7&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&megadragonsauros[i].tempoatirar.elapsed>=500&&megadragonsauros[i].tiros>0){
					moveu=1;
					megadragonsauros[i].tempoatirar.restart();
					send_packet(0,"play dragonsaurobater.ogg "+megadragonsauros[i].x+" "+megadragonsauros[i].y+" "+megadragonsauros[i].map,megadragonsauros[i].map);
					int r=refletir(i2, "dragonsauro", megadragonsauros[i].x, megadragonsauros[i].y, random(800, 2800));
					if(r>0){megadragonsauros[i].vida-=r;megadragonsauros[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(800, 2800);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="megadragonsauro";
					megadragonsauros[i].tiros--;
					return;
				}
				if(megadragonsauros[i].x>players[i2].x+3&&players[i2].insz==false&&players[i2].map==megadragonsauros[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&megadragonsauros[i].modofugir==false&&moveu==0&&players[i2].y==0){
					moveu=1;
					megadragonsauros[i].x--;
					string ss=get_tile_at(megadragonsauros[i].x, megadragonsauros[i].y, megadragonsauros[i].map);
					send_packet(0,"play "+ss+" "+megadragonsauros[i].x+" "+megadragonsauros[i].y+" "+megadragonsauros[i].map,megadragonsauros[i].map);
					megadragonsauros[i].megadragonsaurotimer.restart();
				}
				else if(megadragonsauros[i].x<players[i2].x-3&&players[i2].insz==false&&megadragonsauros[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&megadragonsauros[i].modofugir==false&&moveu==0&&players[i2].y==0){
					moveu=1;
					megadragonsauros[i].x++;
					string ss=get_tile_at(megadragonsauros[i].x, megadragonsauros[i].y, megadragonsauros[i].map);
					send_packet(0,"play "+ss+" "+megadragonsauros[i].x+" "+megadragonsauros[i].y+" "+megadragonsauros[i].map,megadragonsauros[i].map);
					megadragonsauros[i].megadragonsaurotimer.restart();
				}
			}
		}
	}
	netloop();
}
void spawn_megadragonsauro(int x, int y, string map, int vida=random(1800000, 2000000)){
	if(!pvp)return;
	megadragonsauro c(x, y, map, vida);
	megadragonsauros.insert_last(c);
}
tempocair@[] tempocaiu;
class tempocair{
	string nome;
	timer esgotado;
	tempocair(string cn){
		nome=cn;
	}
}
void colocar_tempocair(string nome){
	tempocair t(nome);
	tempocaiu.insert_last(t);
}
void caiuloop(){
	for(uint i=0;i<tempocaiu.length();i++){
		if(i>tempocaiu.length())break;
		if(tempocaiu[i].esgotado.elapsed>=600000){
			file f;
			f.open("players/"+tempocaiu[i].nome+"/rtudo.usr", "w");
			f.write("Tempo esgotado!");
			f.close();
			tempocaiu.remove_at(i);
			break;
		}
	}
}
//fita explosiva
fitaexplosiva@[]fitaexplosivas;
class fitaexplosiva{
	string nomealvo, nomecolou;
	bool explodir=false;
	timer texplodir;
	fitaexplosiva(string n1, string n2){
		nomealvo=n1;
		nomecolou=n2;
		texplodir.force(0);
		texplodir.pause();
	}
}
void colocar_fita(string nomealvo, string nomecolou){
	fitaexplosiva f(nomealvo, nomecolou);
	fitaexplosivas.insert_last(f);
}
void fitaloop(){
	for(uint i=0;i<fitaexplosivas.length();i++){
		if(fitaexplosivas[i].explodir==true&&fitaexplosivas[i].texplodir.elapsed>=887){
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].charname==fitaexplosivas[i].nomealvo){
					players[i2].health-=random(2000, 4000);
					players[i2].lasthit="fita_"+fitaexplosivas[i].nomecolou;
					send_packet(0, "play fexplode.ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					fitaexplosivas.remove_at(i);
					break;
				}
			}
		}
	}
}
//Mina de ouro
minaouro@[]minasouro;
class minaouro{
	int x, y, quantoscavar=random(100, 200), quantosouro=random(4, 10);
	string map;
	minaouro(int mx, int my, string mmap){
		x=mx;
		y=my;
		map=mmap;
	}
}
void colocar_minaouro(int x, int y, string map){
	minaouro o(x, y, map);
	minasouro.insert_last(o);
}
rato@[] ratos;
class rato{
	int x, y, asom=2000;
	uint tiros=1;
	int vida=300;
	string golpeado;
	string map;
	timer ratotimer, tsom;
	timer tempoatirar;
	int ratotime=200;
	bool modofugir=false;
	rato(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void ratoloop(){
	for(uint i=0; i<ratos.length(); i++){
		if(ratos[i].vida<=0){
			send_packet(0,"play m_rato.ogg "+ratos[i].x+" "+ratos[i].y,ratos[i].map);
			string golp=ratos[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;rato;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_rato", 1);
				ganhaxp(players[xx].charname, random(5, 10));
			}
			ratos.remove_at(i);
			break;
		}
		if(ratos[i].tsom.elapsed>=ratos[i].asom+random(1000, 2000)){
			ratos[i].tsom.restart();
			string ss="rato.ogg";
			send_packet(0,"play "+ss+" "+ratos[i].x+" "+ratos[i].y,ratos[i].map);
		}
		if(ratos[i].ratotimer.elapsed>=ratos[i].ratotime){
			ratos[i].ratotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(ratos[i].x>players[i2].x+1&&players[i2].insz==false&&players[i2].map==ratos[i].map&&players[i2].newbie==false&&players[i2].afk==false){
					ratos[i].x--;
					string ss=get_tile_at(ratos[i].x, ratos[i].y, ratos[i].map);
					send_packet(0,"play "+ss+" "+ratos[i].x+" "+ratos[i].y+" "+ratos[i].map,ratos[i].map);
					ratos[i].ratotimer.restart();
					break;
				}
				else if(ratos[i].x<players[i2].x-1&&players[i2].insz==false&&ratos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].newbie==false){
					ratos[i].x++;
					string ss=get_tile_at(ratos[i].x, ratos[i].y, ratos[i].map);
					send_packet(0,"play "+ss+" "+ratos[i].x+" "+ratos[i].y+" "+ratos[i].map,ratos[i].map);
					ratos[i].ratotimer.restart();
					break;
				}
				if(get_rato_distance(ratos[i], players[i2])>-1&&get_rato_distance(ratos[i],players[i2])<=2&&players[i2].afk==false&&players[i2].newbie==false&&ratos[i].tempoatirar.elapsed>=1500&&ratos[i].tiros>0&&players[i2].insz==false){
					ratos[i].tempoatirar.restart();
					send_packet(0,"play ratobater1.ogg "+ratos[i].x+" "+ratos[i].y+" "+ratos[i].map,ratos[i].map);
					int fdoente=random(1, 100);
					if(fdoente>60){
						players[i2].health-=random(50, 100);
						players[i2].doente+=random(1, 5);;
						players[i2].tdoente2.restart();
						send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
						players[i2].lasthit="rato";
						players[i2].tdoente2.restart();
						ratos[i].tiros--;
						break;
					}
				}
				if(ratos[i].tiros<=0){
					ratos[i].tiros=1;
					ratos[i].tempoatirar.restart();
				}
			}
		}
	}
netloop();
}
void spawn_rato(int x, int y, string map){
	if(!pvp)return;
	rato c(x, y, map);
	ratos.insert_last(c);
}
//Bebê sauro
bebesauro@[] bebesauros;
class bebesauro{
	int x, y;
	uint tiros=1;
	int vida=random(50000, 100000);
	string golpeado;
	string map;
	timer bebesaurotimer, tnascendo;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int bebesaurotime=410;
	bool nasceu=false;
	bebesauro(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void bebesauroloop(){
	for(uint i=0; i<bebesauros.length(); i++){
		int andar=1;
		if(bebesauros[i].vida<=0){
			uint total=0;
			send_packet(0,"play m_bbsauro.ogg "+bebesauros[i].x+" "+bebesauros[i].y,bebesauros[i].map);
			string golp=bebesauros[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;bebê_sauro;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(200, 400));
				players[xx].inv_add_item("corpo_de_bebesauro", 1);
			}
			bebesauros.remove_at(i);
			break;
		}
		if(bebesauros[i].tnascendo.elapsed>=6500&&bebesauros[i].nasceu==false){
			bebesauros[i].nasceu=true;
			bebesauros[i].tnascendo.force(0);
			bebesauros[i].tnascendo.pause();
		}
		if(bebesauros[i].nasceu){
			if(bebesauros[i].tsom.elapsed>=bebesauros[i].asom+random(1000, 2000)){
				bebesauros[i].tsom.restart();
				string ss="bbsauro"+random(1, 2)+".ogg";
				send_packet(0,"play "+ss+" "+bebesauros[i].x+" "+bebesauros[i].y,bebesauros[i].map);
			}
			if(bebesauros[i].bebesaurotimer.elapsed>=bebesauros[i].bebesaurotime){
				bebesauros[i].bebesaurotimer.restart();
				for(uint i2=0; i2 < players.length(); i2++){
					if(get_bebesauro_distance(bebesauros[i], players[i2])>-1&&get_bebesauro_distance(bebesauros[i],players[i2])<=4&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false){
						bebesauros[i].tempoatirar.restart();
						send_packet(0,"play bbsauro_bater"+random(1, 2)+".ogg "+bebesauros[i].x+" "+bebesauros[i].y,bebesauros[i].map);
						int r=refletir(i2, "bbsauro", bebesauros[i].x, bebesauros[i].y, random(300, 1000));
						if(r>0){bebesauros[i].vida-=r;bebesauros[i].golpeado=players[i2].charname;break;}
						players[i2].health-=random(300, 1000);
						send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
						players[i2].lasthit="bebê_sauro";
						bebesauros[i].tiros--;
						andar=0;
						break;
					}
					if(bebesauros[i].x>players[i2].x+3&&players[i2].insz==false&&players[i2].map==bebesauros[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&andar==1){
						bebesauros[i].x--;
						string ss=get_tile_at(bebesauros[i].x, bebesauros[i].y, bebesauros[i].map);
						if(ss!="")send_packet(0,"play "+ss+" "+bebesauros[i].x+" "+bebesauros[i].y,bebesauros[i].map);
						andar=0;
					}
					else if(bebesauros[i].x<players[i2].x-3&&players[i2].insz==false&&bebesauros[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&andar==1){
						bebesauros[i].x++;
						string ss=get_tile_at(bebesauros[i].x, bebesauros[i].y, bebesauros[i].map);
						if(ss!="")send_packet(0,"play "+ss+" "+bebesauros[i].x+" "+bebesauros[i].y,bebesauros[i].map);
					}
					if(bebesauros[i].tiros<=0){
						bebesauros[i].tiros=1;
						bebesauros[i].tempoatirar.restart();
					}
				}
			}
		}
	}
}
void spawn_bebesauro(int x, int y, string map){
	if(!pvp)return;
	bebesauro c(x, y, map);
	bebesauros.insert_last(c);
	send_packet(0, "play osauro.ogg "+x+" "+y, map);
}
guardaandar@[]guardasandar;
class guardaandar{
	int x, y, gastar=0, nbater=210, nandar=180, vida=30000;
	timer bater, andar;
	string mapa, matar;
	guardaandar(int gx, int gy, string gmapa, string nmatar){
		x=gx;
		y=gy;
		mapa=gmapa;
		matar=nmatar;
	}
}
void guardaandarloop(){
	for(uint i=0;i<guardasandar.length();i++){
		int andar=1;
		if(guardasandar[i].vida<=0){
			guardasandar.remove_at(i);
			break;
		}
		if(guardasandar[i].bater.elapsed>=guardasandar[i].nbater){
			for(uint i2=0;i2<players.length();i2++){
				if(g_dist(guardasandar[i], players[i2])>-1&&g_dist(guardasandar[i], players[i2])<=4&&guardasandar[i].bater.elapsed>=guardasandar[i].nbater){
					guardasandar[i].bater.restart();
					players[i2].lasthit=guardasandar[i].matar;
					players[i2].health-=random(players[i2].maxhealth/20,players[i2].maxhealth/10);
					string[] armas;
					armas.insert_last("espadahit.ogg");
					armas.insert_last("espada_curtahit.ogg");
					send_packet(0, "play "+armas[random(0, armas.length()-1)]+" "+guardasandar[i].x+" "+guardasandar[i].y, guardasandar[i].mapa);
					andar=0;
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					break;
				}
			}
		}
		if(guardasandar[i].andar.elapsed>=guardasandar[i].nandar&&andar==1){
			guardasandar[i].andar.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(guardasandar[i].x>players[i2].x+2&&guardasandar[i].mapa==players[i2].map&&andar==1){
					guardasandar[i].x--;
					string ss=get_tile_at(guardasandar[i].x, guardasandar[i].y, guardasandar[i].mapa);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+guardasandar[i].x+" "+guardasandar[i].y+" "+guardasandar[i].mapa,guardasandar[i].mapa);
					andar=0;
					break;
				}
				else if(guardasandar[i].x<players[i2].x-2&&guardasandar[i].mapa==players[i2].map&&andar==1){
					guardasandar[i].x++;
					string ss=get_tile_at(guardasandar[i].x, guardasandar[i].y, guardasandar[i].mapa);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+guardasandar[i].x+" "+guardasandar[i].y+" "+guardasandar[i].mapa,guardasandar[i].mapa);
					andar=0;
					break;
				}
			}
		}
	}
	netloop();
}
void colocar_guardaandar(int x, int y, string mapa, string matar){
	if(!pvp)return;
	guardaandar g(x, y, mapa, matar);
	guardasandar.insert_last(g);
}
//Cavalo
cavalo@[] cavalos;
class cavalo{
	int x, y, nandar=410, andando=2;
	timer tandar;
	string mapa;
	cavalo(int cx, int cy, string cmapa){
		x=cx;
		y=cy;
		mapa=cmapa;
	}
}
void novo_cavalo(int x, int y, string mapa){
	cavalo c(x, y, mapa);
	cavalos.insert_last(c);
}
void cavaloloop(){
	for(uint i=0;i<cavalos.length();i++){
		if(cavalos[i].tandar.elapsed>=cavalos[i].nandar){
			cavalos[i].tandar.restart();
			if(cavalos[i].andando==2)cavalos[i].x++;
			else if(cavalos[i].andando==1)cavalos[i].x--;
			if(players.length()>0)send_packet(0, "play cavaloloop.ogg "+cavalos[i].x+" "+cavalos[i].y, cavalos[i].mapa);
			for(uint i2=0;i2<players.length();i2++){
				if(cavalos[i].x==players[i2].x&&cavalos[i].y==players[i2].y&&cavalos[i].mapa==players[i2].map&&players[i2].cavalo==false){
					players[i2].health-=random(4000, 4700);
					send_packet(0, "play cavalocoice.ogg "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="Cavalo";
					break;
				}
			}
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].map==cavalos[i].mapa&&players[i2].cavalo==true){
					players[i2].x=cavalos[i].x;
					players[i2].y=(cavalos[i].y+1);
					send_packet(0,"update_player2 "+players[i2].charname+" "+players[i2].x+" "        +players[i2].y+" "+players[i2].map,players[i2].map);
				}
			}
			if(cavalos[i].andando==2&&string_contains(get_tile_at(cavalos[i].x+1, cavalos[i].y, cavalos[i].mapa), "wall", 1)>-1)cavalos[i].andando=1;
			else if(cavalos[i].andando==1&&string_contains(get_tile_at(cavalos[i].x-1, cavalos[i].y, cavalos[i].mapa), "wall", 1)>-1)cavalos[i].andando=2;
		}
	}
}
//Computador
class computador
{
	int talarme=0, fbau=0;
	int x,y, abau=0, relogio=0;
	string id,map, salarme, salarme2, srelogio;
	int ligada=0, seguro=0, codcasa;//modo alarme
	bool ligando=false, iniciado=false;
	timer tligando, tabrir;
	computador(string mid, int mx, int my,string mm, int ccod, int cseguro, int cbau, int crelogio){
		id=mid;
		x=mx;
		y=my;
		map=mm;
		codcasa=ccod;
		seguro=cseguro;
		abau=cbau;
		tabrir.force(0);tabrir.pause();
		relogio=crelogio;
		if(crelogio==0)srelogio=spawn_moving_sound("clock.ogg", 1, 4, map);
	}
}
computador@[] computadors;
void computadorloop(){
	for(uint i=0;i<computadors.length();i++){
		if(computadors[i].tabrir.elapsed>=5000){
			computadors[i].tabrir.force(0);
			computadors[i].tabrir.pause();
			file f;
			f.open("maps/"+computadors[i].map+".map", "r");
			string[] linhas=delinear(f.read());
			f.close();
			int x=1000, y=0;
			for(uint i2=0;i2<linhas.length();i2++){
				string[] l=string_split(linhas[i2], ":", false);
				if(l[0]=="travelpoint"){
					x=string_to_number(l[5]);
					y=string_to_number(l[6]);
				}
			}
			send_packet(0, "play door12close.ogg "+x+" "+y, "prédio_residencial");
		}
		if(computadors[i].tligando.elapsed>=20000&&computadors[i].ligada==1){
			send_packet(0, "pcliga", computadors[i].map);
			computadors[i].iniciado=true;
			computadors[i].tligando.force(0);
			computadors[i].tligando.pause();
		}
	}
}
void spawncomputador(int x, int y, string map, int cod, int seguro, int bau, int relogio){
	string id;
	bool breakit=false;
	while(true){
		id=randomstring();
		breakit=true;
		for(uint i=0; i<computadors.length; i++){
			if(computadors[i].id==id) breakit=false;
		}
		if(breakit) break;
	}
	computador m1(id,x,y,map, cod, seguro, bau, relogio);
	computadors.insert_last(m1);
	send_packet(0,"spawncomputador "+id+" "+x+" "+y+" "+map,map);
}
void destroycomputador(string id){
	for(uint i=0; i<computadors.length; i++){
		if(computadors[i].id==id){
			send_reliable(0,"destroycomputador "+id, 0);
			computadors.remove_at(i);
			continue;
		}
	}
}
//apartamentos
apartamento@[]apartamentos;
class apartamento{
	string apartamentoinv;
	string map;
	apartamento(string cm, string ci){
		map=cm;
		apartamentoinv=ci;
	}
	void inv_add_item(string itemname, int itemvalue, bool enviar=true){
		string content=apartamentoinv;
		string[] peramitors=string_split(content, "\r\n", true);
		string[] values;
		for(uint i=0; i<peramitors.length(); i++){
			values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
			peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
		}
		if(inv_item_exists(itemname)){
			int orgval;
			if(inv_item(itemname) > -1){
				orgval=string_to_number(values[inv_item(itemname)]);
			}
			else
			{
				return;
			}
			if(orgval+itemvalue < 1){
				inv_delete_item(itemname);
			}
			else
			{
				values[inv_item(itemname)]=(orgval+itemvalue);
				string tempinv;
				for(uint i=0; i<peramitors.length(); i++){
					tempinv+=peramitors[i]+"="+values[i]+"\r\n";
				}
				apartamentoinv=tempinv;
			}
		}
		else
		{
			if(itemvalue > 0){
				apartamentoinv+=itemname+"="+itemvalue+"\r\n";
			}
		}
		send_packet(0, "apartamentoinv "+apartamentoinv, map);
	}
	bool inv_item_exists(string itemname){
		string content=apartamentoinv;
		string[] peramitors=string_split(content, "\r\n", true);
		string[] values;
		for(uint i=0; i<peramitors.length(); i++){
			values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
			peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
		}
		for(uint i=0; i<peramitors.length(); i++){
			if(peramitors[i]==itemname){
				return true;
			}
		}
		return false;
	}
	int inv_item_number(string itemname){
		string content=apartamentoinv;
		string[] peramitors=string_split(content, "\r\n", true);
		string[] values;
		for(uint i=0; i<peramitors.length(); i++){
			values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
			peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
		}
		for(uint i=0; i<peramitors.length(); i++){
			if(peramitors[i]==itemname){
				return string_to_number(values[i]);
			}
		}
		return 0;
	}
	int inv_item(string itemname){
		string content=apartamentoinv;
		string[] peramitors=string_split(content, "\r\n", true);
		string[] values;
		for(uint i=0; i<peramitors.length(); i++){
			values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
			peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
		}
		for(uint i=0; i<peramitors.length(); i++){
			if(peramitors[i]==itemname){
				return i;
			}
		}
		return -1;
	}
	void inv_delete_item(string itemname){
		string content=apartamentoinv;
		string[] peramitors=string_split(content, "\r\n", true);
		string[] values;
		for(uint i=0; i<peramitors.length(); i++){
			values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
			peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
		}
		for(uint i=0; i<peramitors.length(); i++){
			if(peramitors[i]==itemname){
				apartamentoinv=string_replace(apartamentoinv, itemname+"="+values[i]+"\r\n", "", false);
			}
		}
	}
}
void colocar_apartamento(string map, string itens=""){
	apartamento c(map, itens);
	apartamentos.insert_last(c);
}
void atapartamento(string map, string itens){
	for(uint i=0;i<apartamentos.length();i++){
		if(apartamentos[i].map==map){
			apartamentos[i].apartamentoinv=itens;
			send_packet(0, "apartamentoinv "+apartamentos[i].apartamentoinv, apartamentos[i].map);
			break;
		}
	}
}
wall@[]walls;
class wall{
	int x, miny=0, maxy=50, vida=600000;
	string map;
	wall(int cx, string cmap, int cvida){
		x=cx;
		map=cmap;
		vida=cvida;
	}
}
void colocar_wall(int x, string map, int vida=600000){
	file z;
	z.open("maps/"+map+".map", "r");
	string[] m=string_split(z.read(), "\r\n", false);
	z.close();
	m.insert_last("pwall:"+x+":0:50:wallnone");
	z.open("maps/"+map+".map", "w");
	z.write(linear(m));
	z.close();
	update(map);
	wall c(x, map, vida);
	walls.insert_last(c);
}
void wallloop(){
	for(uint i=0;i<walls.length();i++){
		if(walls[i].vida<=0){
			if(walls[i].map=="caverna")tmina2.restart();
			retirar_wall(walls[i].map, walls[i].x);
			break;
		}
	}
}
void retirar_wall(string map, int x){
	file z;
	z.open("maps/"+map+".map", "r");
	string[] m=string_split(z.read(), "\r\n", false);
	z.close();
	for(uint i=0;i<walls.length();i++){
		if(walls[i].map==map&&walls[i].x==x){
			while(true){
				bool t=false;
				for(uint i2=0;i2<m.length();i2++){
					if(string_contains(m[i2], "pwall", 1)>-1){
						string[] bla=string_split(m[i2], ":", false);
						if(string_to_number(bla[1])==x){
							t=true;
							m.remove_at(i2);
						}
					}
				}
				if(!t)break;
			}
			send_packet(0, "play dparede.ogg "+walls[i].x+" "+walls[i].miny, walls[i].map);
			walls.remove_at(i);
			z.open("maps/"+map+".map", "w");
			z.write(linear(m));
			z.close();
			update2(map);
		}
	}
}
//Pias
pia@[] pias(0);
class pia{
	int x, y;
	bool aberta=false;
	string map;
	timer fechar, fechando;
	pia(int bx, int by, string bmap){
		x=bx;
		y=by;
		map=bmap;
		fechar.force(0);
		fechar.pause();
		fechando.force(0);
		fechando.pause();
	}
}
void colocar_pia(int x, int y, string mapa){
	pia b(x, y, mapa);
	pias.insert_last(b);
}
void pialoop(){
	for(uint i=0;i<pias.length();i++){
		if(pias[i].aberta&&pias[i].fechar.elapsed>=7903){
			pias[i].aberta=false;
			send_packet(0, "startmoving", pias[i].map);
			pias[i].fechando.force(0);
			pias[i].fechando.pause();
			pias[i].fechar.force(0);
			pias[i].fechar.pause();
			break;
		}
		if(pias[i].aberta&&pias[i].fechando.elapsed>=250){
			pias[i].fechando.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(pias[i].x==players[i2].x&&pias[i].y==players[i2].y&&pias[i].map==players[i2].map){
					players[i2].sujo-=5;
					if(players[i2].sujo<0)players[i2].sujo=0;
				}
			}
		}
	}
}
//Banheiros
banheiro@[] banheiros(0);
class banheiro{
	int x, y, descarga=0;
	bool vasoaberto=false;
	string map;
	banheiro(int bx, int by, string bmap){
		x=bx;
		y=by;
		map=bmap;
	}
}
void colocar_banheiro(int x, int y, string mapa){
	banheiro b(x, y, mapa);
	banheiros.insert_last(b);
}
//bomba de fogo
bombadefogo@[] bombadefogos;
class bombadefogo{
	int x, y;
	string map, nome, spa;
	int tempoativar=30000;
	int tempofogo=15000;
	timer ativartimer, fogotimer, perdetimer;
	bool ativada=false;
	bombadefogo(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
	}
}
void bombadefogoloop(){
	for(uint i=0; i<bombadefogos.length(); i++){
		if(bombadefogos[i].ativartimer.elapsed>=bombadefogos[i].tempoativar&&bombadefogos[i].ativada==false){
			bombadefogos[i].ativada=true;
			send_packet(0, "play bombadefogoexplode.ogg "+bombadefogos[i].x+" "+bombadefogos[i].y, bombadefogos[i].map);
			bombadefogos[i].spa=spawn_splay("boladefogo.ogg", bombadefogos[i].map);
			bombadefogos[i].perdetimer.restart();
		}
		if(bombadefogos[i].perdetimer.elapsed>=18000&&bombadefogos[i].ativada==true){
			destroy_splay(bombadefogos[i].spa);
			bombadefogos.remove_at(i);
			break;
		}
		if(bombadefogos[i].ativada==true){
			for(uint i2=0;i2<players.length();i2++){
				if(players[i2].map==bombadefogos[i].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].tempofogo.elapsed>=500){
					players[i2].health-=random(1000, 2000);
					players[i2].lasthit="bombadefogo_"+bombadefogos[i].nome;
					players[i2].tempofogo.restart();
				}
			}
		}
	}
}
void spawn_bombadefogo(int x, int y, string map, string nome){
	if(!pvp)return;
	bombadefogo c(x, y, map, nome);
	bombadefogos.insert_last(c);
	send_packet(0,"play bombadefogoativar.ogg "+x+" "+y+" "+map,map);
}
//Bomba atômica
bombaatomica@[] bombaatomicas;
class bombaatomica{
	int x, y;
	string map, nome;
	timer bombaatomicatimer;
	int bombaatomicatime=60000;
	bombaatomica(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
	}
}
void bombaatomicaloop(){
	for(uint i=0; i<bombaatomicas.length(); i++){
		if(bombaatomicas[i].bombaatomicatimer.elapsed>=bombaatomicas[i].bombaatomicatime){
			send_packet(0,"play bombaatomicaexplode.ogg "+bombaatomicas[i].x+" "+bombaatomicas[i].y+" "+bombaatomicas[i].map,bombaatomicas[i].map);
			for(uint i2=0; i2 < players.length(); i2++){
				if(players[i2].map==bombaatomicas[i].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false){
					players[i2].health=0;
					players[i2].lasthit="bombaatomica_"+bombaatomicas[i].nome;
					wait(5);
				}
			}
			for(uint i3=0; i3<objs.length(); i3++){
				if(bombaatomicas[i].map==objs[i3].map){
					objs[i3].obtainable=false;
					objs[i3].delete=true;
					objloop();
				}
			}
			file f;
			f.open("maps/"+bombaatomicas[i].map+".map", "r");
			string mdata=f.read();
			f.close();
			string[] p1=delinear(mdata);
			for(uint ii=0; ii<p1.length(); ii++){
				string[] parsed=string_split(p1[ii], ":", true);
				if(parsed[0]=="travelpoint"&&parsed.length()>8){
					string newmap=parsed[7];
					for(uint i2=0; i2 < players.length(); i2++){
						if(players[i2].map==newmap&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false){
							players[i2].health=0;
							players[i2].lasthit="bombaatomica_"+bombaatomicas[i].nome;
						}
					}
					for(uint i3=0; i3<objs.length(); i3++){
						if(newmap==objs[i3].map){
							objs[i3].obtainable=false;
							objs[i3].delete=true;
							objloop();
						}
					}
				}
			}
			bombaatomicas.remove_at(i);
		}
	}
}
void spawn_bombaatomica(int x, int y, string map, string nome){
	if(!pvp)return;
	bombaatomica c(x, y, map, nome);
	bombaatomicas.insert_last(c);
	send_packet(0,"play atomicaativada.ogg "+x+" "+y+" "+map,map);
}
//Canhão
canhao@[] canhaos;
class canhao
{
	int x, y;
	string map;
	string somcanhao;
	timer canhaotimer;
	int canhaotime;
	canhao(int cx, int cy, string cmap, int ct){
		x=cx;
		y=cy;
		map=cmap;
		canhaotime=ct;
		somcanhao=spawn_moving_sound("rocketloop.ogg",x,y,map);
	}
}
void canhaoloop(){
	for(uint i=0; i<canhaos.length(); i++){
		if(canhaos[i].y<0){
			destroy_moving_sound(canhaos[i].somcanhao);
			spawn_canhao(random(1, 20), 10, canhaos[i].map, (canhaos[i].canhaotime-10));
			canhaos.remove_at(i);
			break;
		}
		if(canhaos[i].canhaotimer.elapsed>=canhaos[i].canhaotime){
			for(uint i2=0; i2 < players.length(); i2++){
				if(canhaos[i].y==players[i2].y&&players[i2].map==canhaos[i].map&&players[i2].x==canhaos[i].x){
					players[i2].health=0;
					send_packet(0,"play bazucahit.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="canhão";
				}
			}
			if(canhaos[i].y>=0){
				canhaos[i].y--;
				update_moving_sound(canhaos[i].somcanhao,canhaos[i].x,canhaos[i].y);
				canhaos[i].canhaotimer.restart();
			}
		}
	}
}
void spawn_canhao(int x, int y, string map, int tempo){
	if(tempo<50)tempo=50;
	canhao c(x, y, map, tempo);
	canhaos.insert_last(c);
}
//Onda de fogo
fogo@[] fogos;
class fogo{
	int x, y;
	string map, soundfogo;
	timer fogotimer;
	int fogotime=540;
	bool direita=false;
	fogo(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
		soundfogo=spawn_moving_sound("boladefogo.ogg",x,y,map);
	}
}
void fogoloop(){
	for(uint i=0; i<fogos.length(); i++){
		if(fogos[i].fogotimer.elapsed>=fogos[i].fogotime){
			if(fogos[i].direita==false){
				fogos[i].x--;
				string l=get_tile_at(fogos[i].x, fogos[i].y, fogos[i].map);
				if(string_contains(l, "wall", 1)>-1)fogos[i].direita=true;
			}
			else if(fogos[i].direita==true){
				fogos[i].x++;
				string l=get_tile_at(fogos[i].x, fogos[i].y, fogos[i].map);
				if(string_contains(l, "wall", 1)>-1)fogos[i].direita=false;
			}
			update_moving_sound(fogos[i].soundfogo,fogos[i].x,fogos[i].y);
			fogos[i].fogotimer.restart();
			for(uint i2=0; i2<players.length(); i2++){
				if(players[i2].x==fogos[i].x&&players[i2].y<=fogos[i].y&&players[i2].map==fogos[i].map&&players[i2].calor_reprimido==false&&players[i2].is_admin()==false){
					if(players[i2].map=="casa_do_bruxo"&&players[i2].y>=15||players[i2].map!="casa_do_bruxo"){
						players[i2].lasthit="ondadefogo";
						players[i2].health=-1;
					}
				}
			}
		}
	}
}
void spawn_fogo(int x, int y, string map){
	fogo c(x, y, map);
	fogos.insert_last(c);
}
//fogo
fogoqueimar@[] fogoqueimars;
class fogoqueimar{
	int x, y;
	string map, somfogo;
	timer fogoqueimartimer, totaltimer;
	int tempototal;
	int fogoqueimartime=100;
	fogoqueimar(int cx, int cy, int tt, string cmap){
		x=cx;
		y=cy;
		tempototal=tt;
		map=cmap;
		somfogo=spawn_moving_sound("molotovloop.ogg", x, y, map);
	}
}
void fogoqueimarloop(){
	for(uint i=0; i<fogoqueimars.length(); i++){
		if(fogoqueimars[i].totaltimer.elapsed>=fogoqueimars[i].tempototal){
			destroy_moving_sound(fogoqueimars[i].somfogo);
			fogoqueimars.remove_at(i);
			break;
		}
		if(fogoqueimars[i].fogoqueimartimer.elapsed>=fogoqueimars[i].fogoqueimartime){
			fogoqueimars[i].fogoqueimartimer.restart();
			for(uint i2=0;i2<players.length();i2++){
				if(get_fogo_distance(fogoqueimars[i], players[i2])>-1&&get_fogo_distance(fogoqueimars[i],players[i2])<=2&&players[i2].afk==false&&players[i2].newbie==false&&players[i2].tempofogo.elapsed>=500&&players[i2].calor_reprimido==false&&players[i2].map==fogoqueimars[i].map){
					players[i2].tempofogo.restart();
					players[i2].health-=random(200,500);
					players[i2].lasthit="fogo";
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
				}
			}
		}
	}
}
void colocar_fogoqueimar(int x, int y, int tempototal, string map){
	fogoqueimar c(x, y, tempototal, map);
	fogoqueimars.insert_last(c);
}
//Helicóptero
helicoptero@[] helicopteros;
class helicoptero{
	int x, y, vida;
	string map, soundhelicoptero;
	timer helicopterotimer, tbomba;
	timer tempoatirar;
	int helicopterotime=100;
	bool sair=false;
	helicoptero(int cx, int cy, string cmap, int cv){
		x=cx;
		y=cy;
		map=cmap;
		soundhelicoptero=spawn_moving_sound("helicopteroloop.ogg",x,y,map);
		vida=cv;
	}
}
void helicopteroloop(){
	for(uint i=0; i<helicopteros.length(); i++){
		if(helicopteros[i].vida<=0){
			send_packet(0,"play bombaatomicaexplode.ogg "+helicopteros[i].x+" "+helicopteros[i].y+" "+helicopteros[i].map, helicopteros[i].map);
			send_reliable(0, "msgnormal Um helicóptero foi derrubado!", 0);
			string[] jitens, jitens2;
			jitens.insert_last("5.56mm");
			jitens.insert_last("7.62mm");
			jitens.insert_last("reais");
			jitens2.insert_last("mp5");
			jitens2.insert_last("ar15");
			jitens2.insert_last("ak47");
			jitens2.insert_last("mega_laser");
			int qitens=random(1000, 2000);
			int qitens2=random(1, 3);
			for(uint c=0;c<jitens.length();c++){
				spawn_obj(random(1, 200),0, jitens[c], qitens,helicopteros[i].map);
			}
			for(uint c=0;c<jitens2.length();c++){
				spawn_obj(random(1, 100),6, jitens2[c], qitens2,helicopteros[i].map);
			}
			destroy_moving_sound(helicopteros[i].soundhelicoptero);
			helicopteros.remove_at(i);
			break;
		}
		if(TIME_HOUR>19&&helicopteros[i].map=="milão"&&helicopteros[i].sair==false||TIME_HOUR>19&&helicopteros[i].map=="milão2"&&helicopteros[i].sair==false)helicopteros[i].sair=true;
		if(helicopteros[i].tbomba.elapsed>=random(40000, 70000)){
			helicopteros[i].tbomba.restart();
			int a=random(1, 3);
			if(a<=2)spawn_maxbomba(helicopteros[i].x,0, helicopteros[i].map, "Helicóptero");
			else spawn_bombaatomica(helicopteros[i].x, helicopteros[i].y, helicopteros[i].map, "helicóptero");
		}
		if(helicopteros[i].helicopterotimer.elapsed>=helicopteros[i].helicopterotime){
			if(helicopteros[i].sair==false){
				for(uint i2=0;i2<players.length();i2++){
					if(players[i2].x==helicopteros[i].x&&players[i2].map==helicopteros[i].map&&helicopteros[i].tempoatirar.elapsed>=random(800, 1000)&&players[i2].pacifico==0){
						helicopteros[i].tempoatirar.restart();
						players[i2].health-=random(600, 1000);
						send_packet(0,"play helicopteroarma"+random(1, 3)+".ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
						send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
						players[i2].lasthit="helicoptero";
					}
					if(players[i2].x>helicopteros[i].x&&players[i2].map==helicopteros[i].map&&players[i2].newbie==false&&players[i2].afk==false){
						helicopteros[i].x++;
						update_moving_sound(helicopteros[i].soundhelicoptero,helicopteros[i].x,helicopteros[i].y);
						helicopteros[i].helicopterotimer.restart();
						break;
					}
					if(players[i2].x<helicopteros[i].x&&players[i2].map==helicopteros[i].map&&players[i2].newbie==false&&players[i2].afk==false){
						helicopteros[i].x--;
						update_moving_sound(helicopteros[i].soundhelicoptero,helicopteros[i].x,helicopteros[i].y);
						helicopteros[i].helicopterotimer.restart();
						break;
					}
				}
			}
			else if(helicopteros[i].sair){
				helicopteros[i].x++;
				update_moving_sound(helicopteros[i].soundhelicoptero,helicopteros[i].x,helicopteros[i].y);
				if(helicopteros[i].x>380){
					helicopteros.remove_at(i);
					break;
				}
			}
		}
	}
}
void spawn_helicoptero(int x, int y, string map, int vida=random(250000, 300000)){
	helicoptero c(x, y, map, vida);
	helicopteros.insert_last(c);
}
//Máquina do tempo
class maquinatempo{
	int x,y;
	string id,map;
	int ligada=0;
	maquinatempo(string mid, int mx, int my,string mm){
		id=mid;
		x=mx;
		y=my;
		map=mm;
	}
}
maquinatempo@[] maquinatempos;
void spawnmaquinatempo(int x, int y, string map){
	string id;
	bool breakit=false;
	while(true){
		id=randomstring();
		breakit=true;
		for(uint i=0; i<maquinatempos.length; i++){
			if(maquinatempos[i].id==id) breakit=false;
		}
		if(breakit) break;
	}
	maquinatempo m1(id,x,y,map);
	maquinatempos.insert_last(m1);
	send_packet(0,"spawnmaquinatempo "+id+" "+x+" "+y+" "+map,map);
}
void destroymaquinatempo(string id){
	for(uint i=0; i<maquinatempos.length; i++){
		if(maquinatempos[i].id==id){
			send_reliable(0,"destroymaquinatempo "+id, 0);
			maquinatempos.remove_at(i);
			continue;
		}
	}
}
//Fonte de água
fonteagua@[] fonteaguas;
class fonteagua{
	int x, y;
	string mapa, som;
	fonteagua(int cx, int cy, string cmapa){
		x=cx;
		y=cy;
		mapa=cmapa;
		som=spawn_moving_sound("fonteagua.ogg", x, y, mapa);
	}
}
void colocar_fonteagua(int x, int y, string mapa){
	fonteagua c(x, y, mapa);
	fonteaguas.insert_last(c);
}
//coco
coco@[] cocos;
class coco{
	int x;
	int y;
	string map, s;
	timer tempo;
	bool pegou=false;
	coco(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void cocoloop(){
	for(uint i=0; i<cocos.length(); i++){
		for(uint i2=0; i2 < players.length(); i2++){
			if(cocos[i].x==players[i2].x&&cocos[i].y==players[i2].y&&cocos[i].map==players[i2].map&&cocos[i].pegou==false){
				players[i2].health-=random(100, 200);
				send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
				players[i2].lasthit="derrepente";
				cocos[i].pegou=true;
			}
		}
		if(cocos[i].y==0){
			send_packet(0,"play cocoacerta.ogg "+cocos[i].x+" "+cocos[i].y+" "+cocos[i].map,cocos[i].map);
			spawn_obj(cocos[i].x, 0, "coco", 1, "floresta_tropical");
			cocos.remove_at(i);
			break;
		}
	}
}
void spawn_coco(int x, int y, string map){
	coco c(x, y, map);
	cocos.insert_last(c);
}
//Fogos
//lobo
lobo@[] lobos;
class lobo{
	int x, y, ladoandar=2;
	uint tiros=1;
	int vida=random(3000, 3300);
	string golpeado;
	string map;
	timer lobotimer;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int lobotime=290;
	lobo(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void loboloop(){
	for(uint i=0; i<lobos.length(); i++){
		if(lobos[i].vida<=0){
			uint total=0;
			send_packet(0,"play m_lobo.ogg "+lobos[i].x+" "+lobos[i].y+" "+lobos[i].map,lobos[i].map);
			string golp=lobos[i].golpeado;
			if(string_contains(golp, "magnet_", 1)>-1){
				golp=string_replace(golp, "magnet_", "", true);
				send_reliable(0, "msg2 um; ;lobo ;morreu no; ;item_magnético; ;de; ;"+golp+";!", 3);
			}
			else{
				send_reliable(0, "msg2 "+golp+"; ;matou um; ;lobo;!", 3);
			}
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_lobo", 1);
				ganhaxp(players[xx].charname, random(20, 30));
			}
			lobos.remove_at(i);
			break;
		}
		if(lobos[i].tsom.elapsed>=lobos[i].asom+random(1000, 3200)){
			lobos[i].tsom.restart();
			string ss="lobonervoso"+random(1, 5)+".ogg";
			send_packet(0,"play "+ss+" "+lobos[i].x+" "+lobos[i].y+" "+lobos[i].map,lobos[i].map);
		}
		if(lobos[i].lobotimer.elapsed>=lobos[i].lobotime){
			lobos[i].lobotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(lobos[i].x>players[i2].x+2&&players[i2].insz==false&&players[i2].map==lobos[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&lobos[i].y<=1){
					lobos[i].x-=2;
					string ss=get_tile_at(lobos[i].x, lobos[i].y, lobos[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+lobos[i].x+" "+lobos[i].y+" "+lobos[i].map,lobos[i].map);
					lobos[i].lobotimer.restart();
					break;
				}
				else if(lobos[i].x<players[i2].x-2&&players[i2].insz==false&&lobos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&lobos[i].y<=1){
					lobos[i].x+=2;
					string ss=get_tile_at(lobos[i].x, lobos[i].y, lobos[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+lobos[i].x+" "+lobos[i].y+" "+lobos[i].map,lobos[i].map);
					lobos[i].lobotimer.restart();
					break;
				}
				if(get_lobo_distance(lobos[i], players[i2])>-1&&get_lobo_distance(lobos[i],players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&lobos[i].tempoatirar.elapsed>=500&&lobos[i].tiros>0){
					lobos[i].tempoatirar.restart();
					send_packet(0,"play lobobater.ogg "+lobos[i].x+" "+lobos[i].y+" "+lobos[i].map,lobos[i].map);
					int r=refletir(i2, "lobo", lobos[i].x, lobos[i].y, random(300, 500));
					if(r>0){lobos[i].vida-=r;lobos[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(300, 500);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="lobo";
					lobos[i].tiros--;
					break;
				}
				if(lobos[i].tiros<=0){
					lobos[i].tiros=1;
					lobos[i].tempoatirar.restart();
				}
			}
		}
	}
}
void spawn_lobo(int x, int y, string map){
	lobo c(x, y, map);
	lobos.insert_last(c);
}
//Tubarão
tubarao@[] tubaraos;
class tubarao{
	int x;
	int y;
	uint tiros=1;
	int vida=random(2200, 2800);
	string golpeado, som;
	string map;
	timer tubaraotimer;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int tubaraotime=200;
	bool modofugir=false;
	tubarao(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
		som=spawn_moving_sound("tubarãoloop.ogg", x, y, map);
	}
}
void tubaraoloop(){
	for(uint i=0; i<tubaraos.length(); i++){
		if(tubaraos[i].vida<=0){
			send_packet(0,"play m_tubarao.ogg "+tubaraos[i].x+" "+tubaraos[i].y+" "+tubaraos[i].map,tubaraos[i].map);
			send_reliable(0, "msg2 "+tubaraos[i].golpeado+"; ;matou um; ;tubarão;!", 3);
			int xx=get_player_index_from(tubaraos[i].golpeado);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_tubarão", 1);
				ganhaxp(players[xx].charname, random(100, 150));
			}
			destroy_moving_sound(tubaraos[i].som);
			tubaraos.remove_at(i);
			break;
		}
		if(tubaraos[i].tsom.elapsed>=tubaraos[i].asom+random(1000, 1200)){
			tubaraos[i].tsom.restart();
			string ss="tubarao"+random(1, 3)+".ogg";
			send_packet(0,"play "+ss+" "+tubaraos[i].x+" "+tubaraos[i].y+" "+tubaraos[i].map,tubaraos[i].map);
		}
		if(tubaraos[i].tubaraotimer.elapsed>=tubaraos[i].tubaraotime){
			tubaraos[i].tubaraotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(tubaraos[i].x>players[i2].x+2&&players[i2].insz==false&&players[i2].map==tubaraos[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&tubaraos[i].modofugir==false){
					tubaraos[i].x--;
					update_moving_sound(tubaraos[i].som, tubaraos[i].x, tubaraos[i].y);
					tubaraos[i].tubaraotimer.restart();
					break;
				}
				else if(tubaraos[i].x<players[i2].x-2&&players[i2].insz==false&&tubaraos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&tubaraos[i].modofugir==false){
					tubaraos[i].x++;
					tubaraos[i].tubaraotimer.restart();
					update_moving_sound(tubaraos[i].som, tubaraos[i].x, tubaraos[i].y);
					break;
				}
				else if(tubaraos[i].y>players[i2].y&&tubaraos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].insz==false&&tubaraos[i].modofugir==false){
					tubaraos[i].y--;
					update_moving_sound(tubaraos[i].som, tubaraos[i].x, tubaraos[i].y);
					tubaraos[i].tubaraotimer.restart();
					break;
				}
				else if(tubaraos[i].y<players[i2].y&&tubaraos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].insz==false&&tubaraos[i].modofugir==false&&tubaraos[i].y<50){
					tubaraos[i].y++;
					update_moving_sound(tubaraos[i].som, tubaraos[i].x, tubaraos[i].y);
					tubaraos[i].tubaraotimer.restart();
					break;
				}
				if(get_tubarao_distance(tubaraos[i], players[i2])>-1&&get_tubarao_distance(tubaraos[i],players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&tubaraos[i].tempoatirar.elapsed>=random(1000, 3000)&&tubaraos[i].tiros>0){
					tubaraos[i].tempoatirar.restart();
					send_packet(0,"play tubaraobater.ogg "+tubaraos[i].x+" "+tubaraos[i].y+" "+tubaraos[i].map,tubaraos[i].map);
					int r=refletir(i2, "tubarao", tubaraos[i].x, tubaraos[i].y, random(1800, 2800));
					if(r>0){tubaraos[i].vida-=r;tubaraos[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(1800, 2800);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="um tubarão";
					tubaraos[i].tiros--;
					break;
				}
				if(tubaraos[i].tiros<=0){
					tubaraos[i].tiros=1;
				}
			}
		}
	}
}
void spawn_tubarao(int x, int y, string map){
	if(!pvp)return;
	tubarao c(x, y, map);
	tubaraos.insert_last(c);
}
//cachorro
cachorro@[] cachorros;
class cachorro{
	int x, y, ladoandar=2;
	uint tiros=1;
	int vida=random(2000, 2300);
	string golpeado;
	string map;
	timer cachorrotimer;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int cachorrotime=290;
	cachorro(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void cachorroloop(){
	for(uint i=0; i<cachorros.length(); i++){
		if(cachorros[i].vida<=0){
			uint total=0;
			send_packet(0,"play m_cachorro.ogg "+cachorros[i].x+" "+cachorros[i].y+" "+cachorros[i].map,cachorros[i].map);
			string golp=cachorros[i].golpeado;
			if(string_contains(golp, "magnet_", 1)>-1){
				golp=string_replace(golp, "magnet_", "", true);
				send_reliable(0, "msg2 um; ;cachorro; ;morreu no; ;item_magnético; ;de; ;"+golp+";!", 3);
			}
			else{
				send_reliable(0, "msg2 "+golp+"; ;matou um; ;cachorro;!", 3);
			}
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_cachorro", 1);
				ganhaxp(players[xx].charname, random(10, 20));
			}
			cachorros.remove_at(i);
			break;
		}
		if(cachorros[i].tsom.elapsed>=cachorros[i].asom+random(1000, 3200)){
			cachorros[i].tsom.restart();
			string ss="cachorronervoso"+random(1, 5)+".ogg";
			send_packet(0,"play "+ss+" "+cachorros[i].x+" "+cachorros[i].y+" "+cachorros[i].map,cachorros[i].map);
		}
		if(cachorros[i].cachorrotimer.elapsed>=cachorros[i].cachorrotime){
			cachorros[i].cachorrotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(cachorros[i].x>players[i2].x+2&&players[i2].insz==false&&players[i2].map==cachorros[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&cachorros[i].y<=1){
					cachorros[i].x-=2;
					string ss=get_tile_at(cachorros[i].x, cachorros[i].y, cachorros[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+cachorros[i].x+" "+cachorros[i].y+" "+cachorros[i].map,cachorros[i].map);
					cachorros[i].cachorrotimer.restart();
					break;
				}
				else if(cachorros[i].x<players[i2].x-2&&players[i2].insz==false&&cachorros[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&cachorros[i].y<=1){
					cachorros[i].x+=2;
					string ss=get_tile_at(cachorros[i].x, cachorros[i].y, cachorros[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+cachorros[i].x+" "+cachorros[i].y+" "+cachorros[i].map,cachorros[i].map);
					cachorros[i].cachorrotimer.restart();
					break;
				}
				if(get_cachorro_distance(cachorros[i], players[i2])>-1&&get_cachorro_distance(cachorros[i],players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&cachorros[i].tempoatirar.elapsed>=500&&cachorros[i].tiros>0){
					cachorros[i].tempoatirar.restart();
					send_packet(0,"play cachorrobater.ogg "+cachorros[i].x+" "+cachorros[i].y+" "+cachorros[i].map,cachorros[i].map);
					int r=refletir(i2, "cachorro", cachorros[i].x, cachorros[i].y, random(300, 500));
					if(r>0){cachorros[i].vida-=r;cachorros[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(300, 500);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="cachorro";
					cachorros[i].tiros--;
					break;
				}
				if(cachorros[i].tiros<=0){
					cachorros[i].tiros=1;
					cachorros[i].tempoatirar.restart();
				}
			}
		}
	}
	netloop();
}
void spawn_cachorro(int x, int y, string map){
	cachorro c(x, y, map);
	cachorros.insert_last(c);
}
//macaco
macaco@[] macacos;
class macaco{
	int x, y, asom=4000;
	uint tiros=1;
	int vida=1800;
	string golpeado;
	string map;
	timer macacotimer, tsom;
	timer tempoatirar;
	int macacotime=370;
	bool modofugir=false;
	macaco(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void macacoloop(){
	for(uint i=0; i<macacos.length(); i++){
		if(macacos[i].vida<=0){
			send_packet(0,"play m_macaco.ogg "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
			string golp=macacos[i].golpeado;
			send_reliable(0, "msg2 "+golp+"; ;matou um; ;macaco;!", 3);
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_macaco", 1);
				ganhaxp(players[xx].charname, random(5, 10));
			}
			macacos.remove_at(i);
			break;
		}
		if(macacos[i].tsom.elapsed>=macacos[i].asom+random(1000, 2000)){
			macacos[i].tsom.restart();
			string ss="macaco"+random(1, 3)+".ogg";
			send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
		}
		if(macacos[i].macacotimer.elapsed>=macacos[i].macacotime){
			macacos[i].macacotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(macacos[i].x>players[i2].x+1&&players[i2].insz==false&&players[i2].map==macacos[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&macacos[i].modofugir==false){
					macacos[i].x--;
					string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
					send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
					macacos[i].macacotimer.restart();
					break;
				}
				else if(macacos[i].x<players[i2].x-1&&players[i2].insz==false&&macacos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&macacos[i].modofugir==false){
					macacos[i].x++;
					string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
					send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
					macacos[i].macacotimer.restart();
					break;
				}
				if(get_macaco_distance(macacos[i], players[i2])>-1&&get_macaco_distance(macacos[i],players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&macacos[i].tempoatirar.elapsed>=500&&macacos[i].tiros>0&&players[i2].insz==false){
					macacos[i].tempoatirar.restart();
					send_packet(0,"play macacobater1.ogg "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
					int r=refletir(i2, "macaco", macacos[i].x, macacos[i].y, random(50, 100));
					if(r>0){macacos[i].vida-=r;macacos[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(50, 100);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="macaco";
					macacos[i].tiros--;
					break;
				}
				if(macacos[i].tiros<=0){
					macacos[i].tiros=1;
					macacos[i].tempoatirar.restart();
				}
			}
			for(uint za=0;za<objs.length();za++){
				if(macacos[i].map==objs[za].map&&macacos[i].y<objs[za].y){
					if(objs[za].item=="banana"||objs[za].item=="maçã"||objs[za].item=="figo"||objs[za].item=="morango"||objs[za].item=="goiaba"||objs[za].item=="pera"||objs[za].item=="jabuticaba"||objs[za].item=="caqui"||objs[za].item=="amora"){
						macacos[i].y++;
						string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
						send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
						break;
					}
				}
				if(macacos[i].map==objs[za].map&&macacos[i].y>objs[za].y){
					if(objs[za].item=="banana"||objs[za].item=="maçã"||objs[za].item=="figo"||objs[za].item=="morango"||objs[za].item=="goiaba"||objs[za].item=="pera"||objs[za].item=="jabuticaba"||objs[za].item=="caqui"||objs[za].item=="amora"){
						macacos[i].y--;
						string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
						send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
						break;
					}
				}
				if(macacos[i].map==objs[za].map&&macacos[i].x<objs[za].x){
					if(objs[za].item=="banana"||objs[za].item=="maçã"||objs[za].item=="figo"||objs[za].item=="morango"||objs[za].item=="goiaba"||objs[za].item=="pera"||objs[za].item=="jabuticaba"||objs[za].item=="caqui"||objs[za].item=="amora"){
						macacos[i].x++;
						string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
						send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
						break;
					}
				}
				if(macacos[i].map==objs[za].map&&macacos[i].x>objs[za].x){
					if(objs[za].item=="banana"||objs[za].item=="maçã"||objs[za].item=="figo"||objs[za].item=="morango"||objs[za].item=="goiaba"||objs[za].item=="pera"||objs[za].item=="jabuticaba"||objs[za].item=="caqui"||objs[za].item=="amora"){
						macacos[i].x--;
						string ss=get_tile_at(macacos[i].x, macacos[i].y, macacos[i].map);
						send_packet(0,"play "+ss+" "+macacos[i].x+" "+macacos[i].y+" "+macacos[i].map,macacos[i].map);
						break;
					}
				}
				else if(macacos[i].map==objs[za].map&&macacos[i].x==objs[za].x&&macacos[i].y==objs[za].y){
					if(objs[za].item=="banana"||objs[za].item=="maçã"||objs[za].item=="figo"||objs[za].item=="morango"||objs[za].item=="goiaba"||objs[za].item=="pera"||objs[za].item=="jabuticaba"||objs[za].item=="caqui"||objs[za].item=="amora"){
						macacos[i].y+=10;
						if(macacos[i].y>20) macacos[i].y=20;
						objs[za].obtainable=false;
						objs[za].delete=true;
						objloop();
						break;
					}
				}
			}
		}
	}
}
void spawn_macaco(int x, int y, string map){
	if(!pvp)return;
	macaco c(x, y, map);
	macacos.insert_last(c);
}
//Dragonsauro
dragonsauro@[] dragonsauros;
class dragonsauro{
	int x;
	int y, nbotar=random(600000, 1200000);
	uint tiros=1;
	int vida;
	string golpeado;
	string map;
	timer dragonsaurotimer, tbotar;
	timer tempoatirar;
	timer tsom;
	int asom=4000;
	int dragonsaurotime=999;
	bool modofugir=false;
	dragonsauro(int cx, int cy, string cmap, int cvida){
		x=cx;
		y=cy;
		map=cmap;
		vida=cvida;
	}
}
void dragonsauroloop(){
	for(uint i=0; i<dragonsauros.length(); i++){
		if(dragonsauros[i].vida<=0){
			uint total=0;
			send_packet(0,"play m_dragonsauro.ogg "+dragonsauros[i].x+" "+dragonsauros[i].y+" "+dragonsauros[i].map,dragonsauros[i].map);
			string golp=dragonsauros[i].golpeado;
			if(string_contains(golp, "magnet_", 1)>-1){
				golp=string_replace(golp, "magnet_", "", true);
				send_reliable(0, "msg2 um; ;dragonsauro; ;morreu no; ;item_magnético; ;de; ;"+golp+";!", 3);
			}
			else{
				send_reliable(0, "msg2 "+golp+"; ;matou um; ;dragonsauro;!", 3);
			}
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_dragonsauro", 1);
				for(uint zum=0;zum<players[xx].nomesequipe.length();zum++){
					int xxx=get_player_index_from(players[xx].nomesequipe[zum]);
					if(xxx>-1){
						if(players[xxx].pacifico==0&&players[xxx].afk==false&&players[xxx].newbie==false) total++;
					}
				}
				if(total==0)return;
				int darxp=(random(1500, 2000)/total);
				for(uint zum=0;zum<players[xx].nomesequipe.length();zum++){
					int xxx=get_player_index_from(players[xx].nomesequipe[zum]);
					if(xxx>-1){
						if(players[xxx].pacifico==0&&players[xxx].afk==false&&players[xxx].newbie==false){
							players[xxx].xp+=darxp;
							send_reliable(players[xxx].peer_id, "msgvocêganhou "+darxp, 0);
							if(doublexp==1){
								players[xxx].xp+=darxp;
								send_reliable(players[xxx].peer_id, "msgvocêganhou2 "+darxp, 0);
							}
						}
					}
				}
			}
			dragonsauros.remove_at(i);
			break;
		}
		if(dragonsauros[i].tbotar.elapsed>=dragonsauros[i].nbotar){
			dragonsauros[i].tbotar.restart();
			if(item_exists("ovo_de_dragonsauro")==false)spawn_obj(dragonsauros[i].x,dragonsauros[i].y,"ovo_de_dragonsauro",1,dragonsauros[i].map);
			dragonsauros[i].nbotar=random(600000, 1200000);
		}
		if(dragonsauros[i].tsom.elapsed>=dragonsauros[i].asom+random(1000, 2000)){
			dragonsauros[i].tsom.restart();
			string ss="dragonsauro"+random(1, 3)+".ogg";
			send_packet(0,"play "+ss+" "+dragonsauros[i].x+" "+dragonsauros[i].y+" "+dragonsauros[i].map,dragonsauros[i].map);
		}
		if(dragonsauros[i].dragonsaurotimer.elapsed>=dragonsauros[i].dragonsaurotime){
			dragonsauros[i].dragonsaurotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(dragonsauros[i].x>players[i2].x+3&&players[i2].insz==false&&players[i2].map==dragonsauros[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&dragonsauros[i].modofugir==false){
					dragonsauros[i].x--;
					string ss=get_tile_at(dragonsauros[i].x, dragonsauros[i].y, dragonsauros[i].map);
					send_packet(0,"play "+ss+" "+dragonsauros[i].x+" "+dragonsauros[i].y+" "+dragonsauros[i].map,dragonsauros[i].map);
					dragonsauros[i].dragonsaurotimer.restart();
				}
				else if(dragonsauros[i].x<players[i2].x-3&&players[i2].insz==false&&dragonsauros[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&dragonsauros[i].modofugir==false){
					dragonsauros[i].x++;
					string ss=get_tile_at(dragonsauros[i].x, dragonsauros[i].y, dragonsauros[i].map);
					send_packet(0,"play "+ss+" "+dragonsauros[i].x+" "+dragonsauros[i].y+" "+dragonsauros[i].map,dragonsauros[i].map);
					dragonsauros[i].dragonsaurotimer.restart();
				}
				if(get_dragonsauro_distance(dragonsauros[i], players[i2])>-1&&get_dragonsauro_distance(dragonsauros[i],players[i2])<=7&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&dragonsauros[i].tempoatirar.elapsed>=500&&dragonsauros[i].tiros>0){
					dragonsauros[i].tempoatirar.restart();
					send_packet(0,"play dragonsaurobater.ogg "+dragonsauros[i].x+" "+dragonsauros[i].y+" "+dragonsauros[i].map,dragonsauros[i].map);
					int r=refletir(i2, "dragonsauro", dragonsauros[i].x, dragonsauros[i].y, random(800, 2800));
					if(r>0){dragonsauros[i].vida-=r;dragonsauros[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(800, 2800);
					send_packet(0,"inithurt "+players[i2].voice+" "+players[i2].x+" "+players[i2].y, players[i2].map);
					players[i2].lasthit="dragonsauro";
					dragonsauros[i].tiros--;
					break;
				}
				if(dragonsauros[i].tiros<=0){
					dragonsauros[i].tiros=1;
					dragonsauros[i].tempoatirar.restart();
				}
			}
		}
	}
	netloop();
}
void spawn_dragonsauro(int x, int y, string map, int vida=random(300000, 800000)){
	if(!pvp)return;
	dragonsauro c(x, y, map, vida);
	dragonsauros.insert_last(c);
}
//ursos
urso@[] ursos;
class urso{
	int x;
	int y;
	int nobjs=370;
	uint tiros=1;
	int vida=3000;
	string golpeado;
	string map;
	timer ursotimer, tobjs;
	timer tempoatirar;
	int ursotime=187;
	bool modofugir=false;
	urso(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void ursoloop(){
	for(uint i=0; i<ursos.length(); i++){
		if(ursos[i].vida<=0){
			send_packet(0,"play m_urso.ogg "+ursos[i].x+" "+ursos[i].y+" "+ursos[i].map,ursos[i].map);
			send_reliable(0, "msg2 "+ursos[i].golpeado+"; ;matou um; ;urso;!", 3);
			string golp=ursos[i].golpeado;
			int xx=get_player_index_from(golp);
			if(xx>-1){
				players[xx].inv_add_item("corpo_de_urso", 1);
				ganhaxp(players[xx].charname, random(100, 200));
			}
			ursos.remove_at(i);
			break;
		}
		if(ursos[i].ursotimer.elapsed>=ursos[i].ursotime){
			ursos[i].ursotimer.restart();
			for(uint i2=0; i2 < players.length(); i2++){
				if(ursos[i].x>players[i2].x+1&&players[i2].insz==false&&players[i2].map==ursos[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&ursos[i].modofugir==false&&players[i2].y<=1){
					ursos[i].x--;
					string ss=get_tile_at(ursos[i].x, ursos[i].y, ursos[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+ursos[i].x+" "+ursos[i].y, ursos[i].map);
					break;
				}
				else if(ursos[i].x<players[i2].x-1&&players[i2].insz==false&&ursos[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&ursos[i].modofugir==false&&players[i2].y<=1){
					ursos[i].x++;
					string ss=get_tile_at(ursos[i].x, ursos[i].y, ursos[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+ursos[i].x+" "+ursos[i].y,ursos[i].map);
					break;
				}
				if(get_urso_distance(ursos[i], players[i2])>-1&&get_urso_distance(ursos[i],players[i2])<=2&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&ursos[i].tempoatirar.elapsed>=500&&ursos[i].tiros>0&&players[i2].insz==false){
					ursos[i].tempoatirar.restart();
					send_packet(0,"play ursobater.ogg "+ursos[i].x+" "+ursos[i].y,ursos[i].map);
					int r=refletir(i2, "urso", ursos[i].x, ursos[i].y, random(150, 200));
					if(r>0){ursos[i].vida-=r;ursos[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(150, 200);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="urso";
					ursos[i].tiros--;
					break;
				}
				if(ursos[i].tiros<=0){
					ursos[i].tiros=1;
					ursos[i].tempoatirar.restart();
				}
			}
		}
	}
}
void spawn_urso(int x, int y, string map){
	if(!pvp)return;
	urso c(x, y, map);
	ursos.insert_last(c);
}
//Guarda
guarda@[] guardas;
class guarda{
	int x, y;
	uint tiros=30;
	int vida=5000;
	string golpeado;
	string map;
	timer guardatimer;
	timer tempoatirar;
	timer tempocarregar;
	int guardatime=500;
	guarda(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void guardaloop(){
	for(uint i=0; i<guardas.length(); i++){
		if(guardas[i].guardatimer.elapsed>=guardas[i].guardatime){
			string l=get_zone_at(guardas[i].x, guardas[i].y, guardas[i].map);
			for(uint i2=0; i2 < players.length(); i2++){
				string ll=get_zone_at(players[i2].x, players[i2].y, players[i2].map);
				if(guardas[i].tempoatirar.elapsed>=450&&guardas[i].tiros>0&&players[i2].insz==false&&guardas[i].tempocarregar.elapsed>=1600){
					if(players[i2].inv_item_number("troféu_de_ouro")<8||players[i2].inv_item_number("medalha_de_ouro")<8){
						if(string_contains(ll, "frente", 1)>-1||string_contains(ll,"portão", 1)>-1||string_contains(ll, l, 1)>-1){
							guardas[i].tempoatirar.restart();
							send_packet(0,"play helicopteroarma"+random(1, 3)+".ogg "+guardas[i].x+" "+guardas[i].y+" "+guardas[i].map,guardas[i].map);
							players[i2].health-=random(100, 130);
							send_reliable(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,0);
							players[i2].lasthit="guarda";
							guardas[i].tiros--;
							break;
						}
					}
				}
				if(guardas[i].tiros<=0){
					guardas[i].tiros=30;
					guardas[i].tempocarregar.restart();
					guardas[i].tempoatirar.restart();
					send_packet(0,"play carregar_m60.ogg "+guardas[i].x+" "+guardas[i].y+" "+guardas[i].map,guardas[i].map);
				}
			}
		}
	}
}
void spawn_guarda(int x, int y, string map){
	if(!pvp)return;
	guarda c(x, y, map);
	guardas.insert_last(c);
}
//mercenário
mercenario@[] mercenarios;
class mercenario{
	int x, y;
	uint tiros=30;
	int vida=5000;
	string golpeado;
	string map;
	timer mercenariotimer;
	timer tempoatirar;
	timer tempocarregar;
	int mercenariotime=500;
	mercenario(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void mercenarioloop(){
	for(uint i=0; i<mercenarios.length(); i++){
		if(mercenarios[i].mercenariotimer.elapsed>=mercenarios[i].mercenariotime){
			string l=get_zone_at(mercenarios[i].x, mercenarios[i].y, mercenarios[i].map);
			for(uint i2=0; i2 < players.length(); i2++){
				string ll=get_zone_at(players[i2].x, players[i2].y, players[i2].map);
				if(players[i2].newbie==false&&mercenarios[i].tempoatirar.elapsed>=450&&mercenarios[i].tiros>0&&players[i2].insz==false&&l==ll&&mercenarios[i].tempocarregar.elapsed>=1600){
					mercenarios[i].tempoatirar.restart();
					send_packet(0,"play helicopteroarma"+random(1, 3)+".ogg "+mercenarios[i].x+" "+mercenarios[i].y+" "+mercenarios[i].map,mercenarios[i].map);
					players[i2].health-=random(100, 130);
					send_reliable(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,0);
					players[i2].lasthit="mercenario";
					mercenarios[i].tiros--;
					break;
				}
				if(mercenarios[i].tiros<=0){
					mercenarios[i].tiros=30;
					mercenarios[i].tempocarregar.restart();
					mercenarios[i].tempoatirar.restart();
					send_packet(0,"play carregar_m60.ogg "+mercenarios[i].x+" "+mercenarios[i].y+" "+mercenarios[i].map,mercenarios[i].map);
				}
				if(mercenarios[i].vida<=0){
					send_packet(0,"play notifykills.ogg "+mercenarios[i].x+" "+mercenarios[i].y+" "+mercenarios[i].map,mercenarios[i].map);
					send_reliable(0, "msgdepois "+mercenarios[i].golpeado+" matou um mercenário!", 0);
					mercenarios.remove_at(i);
					break;
				}
			}
		}
	}
}
void spawn_mercenario(int x, int y, string map){
	if(!pvp)return;
	mercenario c(x, y, map);
	mercenarios.insert_last(c);
}
//Prensadeira
prensadeira@[] prensadeiras;
class prensadeira{
	int x, y;
	string map;
	timer prensadeiratimer;
	int prensadeiratime=1686;
	prensadeira(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void prensadeiraloop(){
	for(uint i=0; i<prensadeiras.length(); i++){
		if(prensadeiras[i].prensadeiratimer.elapsed>=prensadeiras[i].prensadeiratime){
			prensadeiras[i].prensadeiratimer.restart();
			string l=get_zone_at(prensadeiras[i].x, prensadeiras[i].y, prensadeiras[i].map);
			for(uint i2=0; i2 < players.length(); i2++){
				string ll=get_zone_at(players[i2].x, players[i2].y, players[i2].map);
				if(players[i2].map==prensadeiras[i].map&&players[i2].afk==false&&l==ll){
					send_reliable(players[i2].peer_id, "ps concrete4hardland.ogg", 0);
					players[i2].health-=random(200, 300);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="prensadeira";
				}
				else if(players[i2].map==prensadeiras[i].map&&get_prensadeira_distance(prensadeiras[i], players[i2])>-1&&get_prensadeira_distance(prensadeiras[i],players[i2])>4){
					send_reliable(players[i2].peer_id, "play concrete4hardland.ogg "+prensadeiras[i].x+" "+prensadeiras[i].y+" "+prensadeiras[i].map, 0);
				}
			}
		}
	}
}
void spawn_prensadeira(int x, int y, string map){
	prensadeira c(x, y, map);
	prensadeiras.insert_last(c);
}
//guardas-cofre
guardacofre@[] guardacofres;
class guardacofre{
	int x;
	int y;
	uint tiros=30;
	int vida=5000;
	string golpeado;
	string map;
	timer guardacofretimer;
	timer tempoatirar;
	int guardacofretime=500;
	guardacofre(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void guardacofreloop(){
	for(uint i=0; i<guardacofres.length(); i++){
		if(guardacofres[i].guardacofretimer.elapsed>=guardacofres[i].guardacofretime){
			for(uint i2=0; i2 < players.length(); i2++){
				if(get_guardacofre_distance(guardacofres[i], players[i2])>-1&&get_guardacofre_distance(guardacofres[i],players[i2])<=15&&players[i2].newbie==false&&guardacofres[i].tempoatirar.elapsed>=100&&guardacofres[i].tiros>0&&players[i2].insz==false){
					guardacofres[i].tempoatirar.restart();
					send_packet(0,"play m4a1s.ogg "+guardacofres[i].x+" "+guardacofres[i].y+" "+guardacofres[i].map,guardacofres[i].map);
					players[i2].health-=random(100, 130);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="guardacofre";
					guardacofres[i].tiros--;
					break;
				}
				if(guardacofres[i].tiros<=0){
					guardacofres[i].tiros=30;
					guardacofres[i].tempoatirar.restart();
					send_packet(0,"play carregar_m4a1.ogg "+guardacofres[i].x+" "+guardacofres[i].y+" "+guardacofres[i].map,guardacofres[i].map);
				}
				if(guardacofres[i].vida<=0){
					send_packet(0,"play notifykills.ogg "+guardacofres[i].x+" "+guardacofres[i].y+" "+guardacofres[i].map,guardacofres[i].map);
					send_reliable(0, "msgdepois "+guardacofres[i].golpeado+" matou um guarda_do_cofre!", 0);
					spawn_obj(guardacofres[i].x, guardacofres[i].y, "m4a1", 1, guardacofres[i].map);
					guardacofres.remove_at(i);
					break;
				}
			}
		}
	}
}
void spawn_guardacofre(int x, int y, string map){
	if(!pvp)return;
	guardacofre c(x, y, map);
	guardacofres.insert_last(c);
}
//Bomba remota
bombaremota@[] bombaremotas;
class bombaremota{
	int x;
	int y;
	string map;
	string nome;
	bool ativou;
	bombaremota(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
		ativou=false;
	}
}
void bombaremotaloop(){
	for(uint i=0; i<bombaremotas.length(); i++){
		if(bombaremotas[i].ativou){
			send_packet(0,"play bombaremotaexplode.ogg "+bombaremotas[i].x+" "+bombaremotas[i].y+" "+bombaremotas[i].map, bombaremotas[i].map);
			for(uint i2=0; i2 < players.length(); i2++){
				if(get_bombaremota_distance(bombaremotas[i], players[i2])>-1&&get_bombaremota_distance(bombaremotas[i],players[i2])<=30&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].insz==false){
					players[i2].health-=random(2000, 3000);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="bombaremota_"+bombaremotas[i].nome;
				}
			}
			bombaremotas.remove_at(i);
		}
	}
}
void spawn_bombaremota(int x, int y, string map, string nome){
	if(!pvp)return;
	bombaremota c(x, y, map, nome);
	bombaremotas.insert_last(c);
	send_packet(0,"play bombaremotaativada.ogg "+x+" "+y+" "+map,map);
}
// paje
paje@[] pajes;
class paje{
	int x;
	int y;
	string map;
	timer pajetimer, tempotambor;
	int pajetime=60000;
	int ntambor=random(20000, 30000);
	paje(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void pajeloop(){
	for(uint i=0; i<pajes.length(); i++){
		if(pajes[i].pajetimer.elapsed>=pajes[i].pajetime){
			if(pajes[i].x<=4){
				pajes[i].pajetimer.restart();
				int andar=random(2, 5);
				pajes[i].x+andar;
				string surface=get_tile_at(pajes[i].x,pajes[i].y,pajes[i].map);
				send_packet(0,"play "+surface+"step"+random(1, 5)+".ogg "+pajes[i].x+" "+pajes[i].y+" "+pajes[i].map,pajes[i].map);
			}
			else if(pajes[i].x>=195){
				pajes[i].pajetimer.restart();
				int andar=random(2, 5);
				pajes[i].x-andar;
				string surface=get_tile_at(pajes[i].x,pajes[i].y,pajes[i].map);
				send_packet(0,"play "+surface+"step"+random(1, 5)+".ogg "+pajes[i].x+" "+pajes[i].y+" "+pajes[i].map,pajes[i].map);
			}
			else if(pajes[i].x>4&&pajes[i].x<=194){
				pajes[i].pajetimer.restart();
				int andar=random(2, 8);
				pajes[i].x+andar;
				string surface=get_tile_at(pajes[i].x,pajes[i].y,pajes[i].map);
				send_packet(0,"play "+surface+"step"+random(1, 5)+".ogg "+pajes[i].x+" "+pajes[i].y+" "+pajes[i].map,pajes[i].map);
			}
			else if(pajes[i].x<199&&pajes[i].x>4){
				pajes[i].pajetimer.restart();
				int andar=random(2, 8);
				pajes[i].x-andar;
				string surface=get_tile_at(pajes[i].x,pajes[i].y,pajes[i].map);
				send_packet(0,"play "+surface+"step"+random(1, 5)+".ogg "+pajes[i].x+" "+pajes[i].y+" "+pajes[i].map,pajes[i].map);
			}
		}
		if(pajes[i].tempotambor.elapsed>=pajes[i].ntambor){
			pajes[i].ntambor=random(20000, 30000);
			pajes[i].tempotambor.restart();
			send_packet(0,"play tamboraldeia.ogg "+pajes[i].x+" "+pajes[i].y+" "+pajes[i].map,pajes[i].map);
		}
	}
}
void spawn_paje(int x, int y, string map){
	paje c(x, y, map);
	pajes.insert_last(c);
}
//sequestradors
sequestrador@[] sequestradors;
class sequestrador{
	int x;
	int y;
	uint tiros=30;
	int vida=100000;
	string golpeado;
	string map;
	timer sequestradortimer;
	timer tempoatirar;
	int sequestradortime=300;
	sequestrador(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
	}
}
void sequestradorloop(){
	for(uint i=0; i<sequestradors.length(); i++){
		if(sequestradors[i].vida<=0){
			send_reliable(0, "msg2 "+sequestradors[i].golpeado+" ;matou um sequestrador!", 3);
			int xx=get_player_index_from(sequestradors[i].golpeado);
			if(xx>-1){
				ganhaxp(players[xx].charname, random(10000, 20000));
				players[xx].inv_add_item("corpo_de_sequestrador", 10);
			}
			spawn_obj(sequestradors[i].x, sequestradors[i].y, "m4a1", 1, sequestradors[i].map);
			sequestradors.remove_at(i);
			break;
		}
		if(sequestradors[i].sequestradortimer.elapsed>=sequestradors[i].sequestradortime){
			for(uint i2=0; i2 < players.length(); i2++){
				bool andou=false;
				if(sequestradors[i].tiros<=0){
					sequestradors[i].tiros=30;
					sequestradors[i].tempoatirar.restart();
					send_packet(0,"play carregar_m4a1.ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
				}
				if(get_sequestrador_distance(sequestradors[i], players[i2])>-1&&get_sequestrador_distance(sequestradors[i],players[i2])<=15&&players[i2].afk==false&&players[i2].newbie==false&&sequestradors[i].tempoatirar.elapsed>=500&&players[i2].newbie==false&&sequestradors[i].tempoatirar.elapsed>=500&&sequestradors[i].tiros>0&&players[i2].insz==false){
					sequestradors[i].tempoatirar.restart();
					send_packet(0,"play m4a1.ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
					int r=refletir(i2, "sequestrador", sequestradors[i].x, sequestradors[i].y, random(50, 100));
					if(r>0){sequestradors[i].vida-=r;sequestradors[i].golpeado=players[i2].charname;break;}
					players[i2].health-=random(50, 100);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="sequestrador";
					sequestradors[i].tiros--;
					andou=true;
					break;
				}
				if(sequestradors[i].x>players[i2].x+3&&players[i2].insz==false&&players[i2].map==sequestradors[i].map&&players[i2].newbie==false&&players[i2].afk==false&&andou==false){
					sequestradors[i].x--;
					string ss=get_tile_at(sequestradors[i].x, sequestradors[i].y, sequestradors[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
					sequestradors[i].sequestradortimer.restart();
					andou=true;
				}
				else if(sequestradors[i].x<players[i2].x-3&&players[i2].insz==false&&sequestradors[i].map==players[i2].map&&players[i2].afk==false&&players[i2].newbie==false&&andou==false){
					sequestradors[i].x++;
					string ss=get_tile_at(sequestradors[i].x, sequestradors[i].y, sequestradors[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
					sequestradors[i].sequestradortimer.restart();
					andou=true;
				}
				else if(sequestradors[i].y>players[i2].y+3&&sequestradors[i].map==players[i2].map&&players[i2].afk==false&&players[i2].newbie==false&&players[i2].insz==false&&andou==false){
					sequestradors[i].y--;
					string ss=get_tile_at(sequestradors[i].x, sequestradors[i].y, sequestradors[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
					sequestradors[i].sequestradortimer.restart();
					andou=true;
				}
				else if(sequestradors[i].y<players[i2].y-3&&sequestradors[i].map==players[i2].map&&players[i2].afk==false&&players[i2].newbie==false&&players[i2].insz==false&&andou==false){
					sequestradors[i].y++;
					string ss=get_tile_at(sequestradors[i].x, sequestradors[i].y, sequestradors[i].map);
					send_packet(0,"play "+ss+"step"+random(1, 5)+".ogg "+sequestradors[i].x+" "+sequestradors[i].y+" "+sequestradors[i].map,sequestradors[i].map);
					sequestradors[i].sequestradortimer.restart();
					andou=true;
				}
			}
		}
	}
}
void spawn_sequestrador(int x, int y, string map){
	if(!pvp)return;
	sequestrador c(x, y, map);
	sequestradors.insert_last(c);
}
//dardo envenenado
dardoenvenenado@[] dardosenvenenados;
class dardoenvenenado{
	int x;
	int y;
	int dist;
	string map;
	string nome;
	int n=100;
	timer tempo;
	bool pegou=false;
	dardoenvenenado(int cx, int cy, string cmap, string cnome, int ddist){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
		dist=ddist;
	}
}
void dardoenvenenadoloop(){
	for(uint i=0; i<dardosenvenenados.length(); i++){
		for(uint i2=0; i2 < players.length(); i2++){
			if(players[i2].charname!=dardosenvenenados[i].nome&&get_dardoenvenenado_distance(dardosenvenenados[i],players[i2])>-1&&get_dardoenvenenado_distance(dardosenvenenados[i],players[i2])<=dardosenvenenados[i].dist&&emequipe(dardosenvenenados[i].nome, players[i2].charname)==false&&dardosenvenenados[i].pegou==false){
				players[i2].health-=random(3, 9);
				players[i2].nveneno+=30;
				players[i2].tempoveneno2.restart();
				players[i2].envenenado=true;
				send_packet(0,"play dardoacerta.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
				send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
				players[i2].lasthit="dardoenvenenado_"+dardosenvenenados[i].nome;
				dardosenvenenados[i].pegou=true;
			}
		}
		dardosenvenenados.remove_at(i);
	}
}
void spawn_dardoenvenenado(int x, int y, string map, string nome, int dist=1){
	if(!pvp)return;
	dardoenvenenado c(x, y, map, nome, dist);
	dardosenvenenados.insert_last(c);
	send_packet(0,"play dardolança.ogg "+x+" "+y+" "+map,map);
}
//dardo
dardo@[] dardos;
class dardo
{
	int x;
	int y;
	int dist=1;
	string map;
	string nome;
	int n=100;
	timer tempo;
	bool pegou=false;
	dardo(int cx, int cy, string cmap, string cnome, int ddist){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
		dist=ddist;
	}
}
void dardoloop(){
	for(uint i=0; i<dardos.length(); i++){
		for(uint i2=0; i2 < players.length(); i2++){
			if(players[i2].charname!=dardos[i].nome&&get_dardo_distance(dardos[i],players[i2])>-1&&get_dardo_distance(dardos[i],players[i2])<=dardos[i].dist&&dardos[i].pegou==false&&emequipe(dardos[i].nome, players[i2].charname)==false){
				send_reliable(players[i2].peer_id, "stopmoving", 0);
				players[i2].health-=random(3, 9);
				players[i2].nparalisado+=5000;
				players[i2].paralisado=true;
				players[i2].tparalisado.restart();
				send_packet(0,"play dardoacerta.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
				send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
				players[i2].lasthit="dardo_"+dardos[i].nome;
				dardos[i].pegou=true;
			}
		}
		dardos.remove_at(i);
	}
}
void spawn_dardo(int x, int y, string map, string nome, int dist=1){
	dardo c(x, y, map, nome, dist);
	dardos.insert_last(c);
	send_packet(0,"play dardolança.ogg "+x+" "+y+" "+map,map);
}
//projéteis
projetei@[] projeteis;
class projetei{
	int x;
	int y;
	string map;
	string nome;
	string somprojetei, njogador;
	timer projeteitimer;
	int projeteitime=90;
	projetei(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
		somprojetei=spawn_moving_sound("projetilloop.ogg",x,y,map);
		njogador=selecionar_jogador(map);
	}
}
void projeteiloop(){
	for(uint i=0; i<projeteis.length(); i++){
		if(projeteis[i].projeteitimer.elapsed>=projeteis[i].projeteitime){
			int i2=get_player_index_from(projeteis[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=projeteis[i].map)i2=-1;
			}
			if(i2<0)projeteis[i].njogador=selecionar_jogador(projeteis[i].map);
			i2=get_player_index_from(projeteis[i].njogador);
			if(i2>-1){
				if(players[i2].pacifico==1||get_safezone_at(players[i2].x, players[i2].y, players[i2].map)==true||players[i2].afk||players[i2].map!=projeteis[i].map)i2=-1;
			}
			if(i2<0)break;
			if(projeteis[i].x>players[i2].x&&players[i2].insz==false&&projeteis[i].nome!=players[i2].charname&&players[i2].map==projeteis[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&emequipe(players[i2].charname, projeteis[i].nome)==false){
				projeteis[i].x--;
				update_moving_sound(projeteis[i].somprojetei,projeteis[i].x,projeteis[i].y);
				projeteis[i].projeteitimer.restart();
			}
			else if(projeteis[i].x<players[i2].x&&players[i2].insz==false&&projeteis[i].nome!=players[i2].charname&&projeteis[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&emequipe(players[i2].charname, projeteis[i].nome)==false){
				projeteis[i].x++;
				update_moving_sound(projeteis[i].somprojetei,projeteis[i].x,projeteis[i].y);
				projeteis[i].projeteitimer.restart();
			}
			else if(projeteis[i].y>players[i2].y&&projeteis[i].nome!=players[i2].charname&&projeteis[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].insz==false&&emequipe(players[i2].charname, projeteis[i].nome)==false){
				projeteis[i].y--;
				update_moving_sound(projeteis[i].somprojetei,projeteis[i].x,projeteis[i].y);
				projeteis[i].projeteitimer.restart();
			}
			else if(projeteis[i].y<players[i2].y&&projeteis[i].nome!=players[i2].charname&&projeteis[i].map==players[i2].map&&players[i2].afk==false&&players[i2].pacifico==0&&players[i2].newbie==false&&players[i2].insz==false&&emequipe(players[i2].charname, projeteis[i].nome)==false){
				projeteis[i].y++;
				update_moving_sound(projeteis[i].somprojetei,projeteis[i].x,projeteis[i].y);
				projeteis[i].projeteitimer.restart();
			}
			else if(projeteis[i].x==players[i2].x&&players[i2].insz==false&&projeteis[i].y==players[i2].y&&players[i2].charname!=projeteis[i].nome&&players[i2].map==projeteis[i].map&&players[i2].newbie==false&&players[i2].afk==false&&players[i2].pacifico==0&&emequipe(players[i2].charname, projeteis[i].nome)==false){
				send_reliable(players[i2].peer_id, "stopmoving", 0);
				players[i2].health-=random(100, 200);
				players[i2].tparalisado.restart();
				players[i2].paralisado=true;
				players[i2].nparalisado+=10000;
				send_packet(0,"play projetilacerta.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
				send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
				players[i2].lasthit="projetei_"+projeteis[i].nome;
				destroy_moving_sound(projeteis[i].somprojetei);
				projeteis.remove_at(i);
				break;
			}
		}
	}
}
void spawn_projetei(int x, int y, string map, string nome){
	projetei c(x, y, map, nome);
	projeteis.insert_last(c);
}
//bomba relógio
bombarelogio@[] bombarelogios;
class bombarelogio{
	int x;
	int y;
	string map;
	string nome;
	timer bombarelogiotimer, beeptimer;
	int beeptime;
	int bombarelogiotime=5000;
	bombarelogio(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
	}
}
void bombarelogioloop(){
	for(uint i=0; i<bombarelogios.length(); i++){
		bombarelogios[i].bombarelogiotime=5000-bombarelogios[i].bombarelogiotimer.elapsed;
		bombarelogios[i].beeptime=bombarelogios[i].bombarelogiotime/10+50;
		if (bombarelogios[i].beeptimer.elapsed>=bombarelogios[i].beeptime){
			bombarelogios[i].beeptimer.restart();
			send_packet(0,"play timebombbeep.ogg "+bombarelogios[i].x+" "+bombarelogios[i].y+" "+bombarelogios[i].map,bombarelogios[i].map);
		}
		if(bombarelogios[i].bombarelogiotime<=0){
			for(uint i2=0; i2 < players.length(); i2++){
				if(get_bombarelogio_distance(bombarelogios[i], players[i2])>-1&&get_bombarelogio_distance(bombarelogios[i],players[i2])<=30&&players[i2].afk==false&&players[i2].pacifico==0){
					players[i2].health-=random(500, 1000);
					send_packet(0,"play timebombexplode.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="bombarelogio_"+bombarelogios[i].nome;
				}
			}
			bombarelogios.remove_at(i);
		}
	}
}
void spawn_bombarelogio(int x, int y, string map, string nome){
	bombarelogio c(x, y, map, nome);
	bombarelogios.insert_last(c);
	send_packet(0,"play timebombdrop.ogg "+x+" "+y+" "+map,map);
}
//maxbomba
maxbomba@[] maxbombas;
class maxbomba{
	int x;
	int y;
	string map;
	string nome;
	timer maxbombatimer;
	int maxbombatime=20000;
	maxbomba(int cx, int cy, string cmap, string cnome){
		x=cx;
		y=cy;
		map=cmap;
		nome=cnome;
	}
}
void maxbombaloop(){
	for(uint i=0; i<maxbombas.length(); i++){
		if(maxbombas[i].maxbombatimer.elapsed>=maxbombas[i].maxbombatime){
			for(uint i2=0; i2 < players.length(); i2++){
				if(get_bomba_distance(maxbombas[i], players[i2])>-1&&get_bomba_distance(maxbombas[i],players[i2])<=50&&players[i2].afk==false&&players[i2].pacifico==0){
					players[i2].health-=random(3000, 4000);
					send_packet(0,"play mina.ogg "+players[i2].x+" "+players[i2].y+" "+players[i2].map,players[i2].map);
					send_packet(0,"inithurt "+players[i2].charname+" "+players[i2].x+" "+players[i2].y+" "+players[i2].voice+" "+players[i2].pitch+" "+players[i2].map,players[i2].map);
					players[i2].lasthit="maxbomba_"+maxbombas[i].nome;
				}
			}
			maxbombas.remove_at(i);
		}
	}
}
void spawn_maxbomba(int x, int y, string map, string nome){
	maxbomba c(x, y, map, nome);
	maxbombas.insert_last(c);
	send_packet(0,"play notify_blip.ogg "+x+" "+y+" "+map,map);
}
//cachorro
dog@[] dogs;
class dog{
	int x;
	int y;
	string map;
	string sounddog;
	timer dogtimer;
	int dogtime=500;
	dog(int cx, int cy, string cmap){
		x=cx;
		y=cy;
		map=cmap;
		sounddog=spawn_moving_sound("water5.ogg",x,y,map);
	}
}
void dogloop(){
	for(uint i=0; i<dogs.length(); i++){
		if(dogs[i].dogtimer.elapsed>=dogs[i].dogtime){
			dogs[i].x--;
			update_moving_sound(dogs[i].sounddog,dogs[i].x,dogs[i].y);
			dogs[i].dogtimer.restart();
		}
		if(dogs[i].x<-20){
			destroy_moving_sound(dogs[i].sounddog);
			dogs.remove_at(i);
			break;
		}
		for(uint i2=0; i2<players.length(); i2++){
			if(players[i2].x==dogs[i].x&&players[i2].y<=dogs[i].y&&players[i2].map==dogs[i].map){
				changemap("túnel", i2);
			}
		}
	}
}
void spawn_dog(int x, int y, string map){
	dog c(x, y, map);
	dogs.insert_last(c);
}
double g_dist(guardaandar@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bombaremota_distance(bombaremota@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bomba_distance(maxbomba@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bombarelogio_distance(bombarelogio@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_sequestrador_distance(sequestrador@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_urso_distance(urso@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dardoenvenenado_distance(dardoenvenenado@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dardo_distance(dardo@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_guardacofre_distance(guardacofre@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_prensadeira_distance(prensadeira@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_dragonsauro_distance(dragonsauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_megadragonsauro_distance(megadragonsauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_macaco_distance(macaco@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_cachorro_distance(cachorro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_tubarao_distance(tubarao@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_lobo_distance(lobo@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_fogo_distance(fogoqueimar@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_bebesauro_distance(bebesauro@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double get_rato_distance(rato@ m1, player@ p2){
	if(m1.map!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
bool emequipe(string nome, string alvo){
	bool encontrado=false;
	int n=get_player_index_from(nome);
	int nb=get_player_index_from(alvo);
	if(n<0||nb<0)return true;
	else if(n>-1&&nb>-1){
		if(players[n].nomesequipe.find(alvo)>-1||players[nb].afk==true||players[nb].pacifico==1||get_safezone_at(players[nb].x, players[nb].y, players[nb].map)==true)return true;
		else return false;
	}
	return true;
}
double get_pato_distance(pato@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double g_zumbi(zumbi@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
string selecionar_jogador(string mapa){
	string[] nomes;
	for(uint i=0;i<players.length();i++){
		if(players[i].map==mapa)nomes.insert_last(players[i].charname);
	}
	if(nomes.length()==0)return "";
	return nomes[random(0, nomes.length()-1)];
}
int refletir(int index, string nome, int x, int y, int dano){
	if(!players[index].star2)return 0;
	send_packet_unreliable(0, players[index].x, "play lih.ogg "+players[index].x+" "+players[index].y, players[index].map);
	send_packet_unreliable(0, x,"rico "+nome+"apanhando1.ogg "+x+" "+y, players[index].map);
	return dano;
}
double g_robo_coletore(robo_coletor@ m1, player@ p2){
	if(m1.mapa!=p2.map) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double gcforte(carroforte@ m1, player@ p2){
	if(m1.mapa!=p2.map||p2.afk||p2.pacifico==1) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
double g_sequestrador2(sequestrador2@ m1, player@ p2){
	if(m1.mapa!=p2.map||p2.afk||p2.pacifico==1) return -1;
	int dx,dy;
	if(m1.x<=p2.x) dx=p2.x-m1.x;
	else dx=m1.x-p2.x;
	if(m1.y<=p2.y) dy=p2.y-m1.y;
	else dy=m1.y-p2.y;
	return dx+dy;
}
